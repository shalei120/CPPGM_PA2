invalid #
identifier include
invalid <iostream>
invalid #
identifier include
invalid <string>
simple using KW_USING
simple namespace KW_NAMESPACE
identifier std
simple ; OP_SEMICOLON
simple int KW_INT
identifier HexCharToValue
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple switch KW_SWITCH
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple case KW_CASE
literal '0' char 30
simple : OP_COLON
simple return KW_RETURN
literal 0 int 00000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '1' char 31
simple : OP_COLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '2' char 32
simple : OP_COLON
simple return KW_RETURN
literal 2 int 02000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '3' char 33
simple : OP_COLON
simple return KW_RETURN
literal 3 int 03000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '4' char 34
simple : OP_COLON
simple return KW_RETURN
literal 4 int 04000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '5' char 35
simple : OP_COLON
simple return KW_RETURN
literal 5 int 05000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '6' char 36
simple : OP_COLON
simple return KW_RETURN
literal 6 int 06000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '7' char 37
simple : OP_COLON
simple return KW_RETURN
literal 7 int 07000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '8' char 38
simple : OP_COLON
simple return KW_RETURN
literal 8 int 08000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '9' char 39
simple : OP_COLON
simple return KW_RETURN
literal 9 int 09000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'A' char 41
simple : OP_COLON
simple return KW_RETURN
literal 10 int 0A000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'a' char 61
simple : OP_COLON
simple return KW_RETURN
literal 10 int 0A000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'B' char 42
simple : OP_COLON
simple return KW_RETURN
literal 11 int 0B000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'b' char 62
simple : OP_COLON
simple return KW_RETURN
literal 11 int 0B000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'C' char 43
simple : OP_COLON
simple return KW_RETURN
literal 12 int 0C000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'c' char 63
simple : OP_COLON
simple return KW_RETURN
literal 12 int 0C000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'D' char 44
simple : OP_COLON
simple return KW_RETURN
literal 13 int 0D000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'd' char 64
simple : OP_COLON
simple return KW_RETURN
literal 13 int 0D000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'E' char 45
simple : OP_COLON
simple return KW_RETURN
literal 14 int 0E000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'e' char 65
simple : OP_COLON
simple return KW_RETURN
literal 14 int 0E000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'F' char 46
simple : OP_COLON
simple return KW_RETURN
literal 15 int 0F000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'f' char 66
simple : OP_COLON
simple return KW_RETURN
literal 15 int 0F000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple char KW_CHAR
identifier ValueToHexChar
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple switch KW_SWITCH
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple case KW_CASE
literal 0 int 00000000
simple : OP_COLON
simple return KW_RETURN
literal '0' char 30
simple ; OP_SEMICOLON
simple case KW_CASE
literal 1 int 01000000
simple : OP_COLON
simple return KW_RETURN
literal '1' char 31
simple ; OP_SEMICOLON
simple case KW_CASE
literal 2 int 02000000
simple : OP_COLON
simple return KW_RETURN
literal '2' char 32
simple ; OP_SEMICOLON
simple case KW_CASE
literal 3 int 03000000
simple : OP_COLON
simple return KW_RETURN
literal '3' char 33
simple ; OP_SEMICOLON
simple case KW_CASE
literal 4 int 04000000
simple : OP_COLON
simple return KW_RETURN
literal '4' char 34
simple ; OP_SEMICOLON
simple case KW_CASE
literal 5 int 05000000
simple : OP_COLON
simple return KW_RETURN
literal '5' char 35
simple ; OP_SEMICOLON
simple case KW_CASE
literal 6 int 06000000
simple : OP_COLON
simple return KW_RETURN
literal '6' char 36
simple ; OP_SEMICOLON
simple case KW_CASE
literal 7 int 07000000
simple : OP_COLON
simple return KW_RETURN
literal '7' char 37
simple ; OP_SEMICOLON
simple case KW_CASE
literal 8 int 08000000
simple : OP_COLON
simple return KW_RETURN
literal '8' char 38
simple ; OP_SEMICOLON
simple case KW_CASE
literal 9 int 09000000
simple : OP_COLON
simple return KW_RETURN
literal '9' char 39
simple ; OP_SEMICOLON
simple case KW_CASE
literal 10 int 0A000000
simple : OP_COLON
simple return KW_RETURN
literal 'A' char 41
simple ; OP_SEMICOLON
simple case KW_CASE
literal 11 int 0B000000
simple : OP_COLON
simple return KW_RETURN
literal 'B' char 42
simple ; OP_SEMICOLON
simple case KW_CASE
literal 12 int 0C000000
simple : OP_COLON
simple return KW_RETURN
literal 'C' char 43
simple ; OP_SEMICOLON
simple case KW_CASE
literal 13 int 0D000000
simple : OP_COLON
simple return KW_RETURN
literal 'D' char 44
simple ; OP_SEMICOLON
simple case KW_CASE
literal 14 int 0E000000
simple : OP_COLON
simple return KW_RETURN
literal 'E' char 45
simple ; OP_SEMICOLON
simple case KW_CASE
literal 15 int 0F000000
simple : OP_COLON
simple return KW_RETURN
literal 'F' char 46
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple int KW_INT
identifier main
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier string
identifier ppnumber
simple = OP_ASS
literal "00017777777777" array of 15 char 303030313737373737373737373700
simple ; OP_SEMICOLON
identifier string
identifier num16
simple = OP_ASS
literal "0" array of 2 char 3000
simple ; OP_SEMICOLON
simple int KW_INT
identifier w
simple = OP_ASS
literal 10 int 0A000000
simple , OP_COMMA
identifier start
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
literal 0 int 00000000
simple ] OP_RSQUARE
simple == OP_EQ
literal '0' char 30
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
literal 1 int 01000000
simple ] OP_RSQUARE
simple == OP_EQ
literal 'x' char 78
simple || OP_LOR
identifier ppnumber
simple [ OP_LSQUARE
literal 1 int 01000000
simple ] OP_RSQUARE
simple == OP_EQ
literal 'X' char 58
simple ) OP_RPAREN
simple { OP_LBRACE
identifier start
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier w
simple = OP_ASS
literal 16 int 10000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier start
simple = OP_ASS
literal 1 int 01000000
simple ; OP_SEMICOLON
identifier w
simple = OP_ASS
literal 8 int 08000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier w
simple == OP_EQ
literal 16 int 10000000
simple ) OP_RPAREN
identifier num16
simple = OP_ASS
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 2 int 02000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple { OP_LBRACE
simple for KW_FOR
simple ( OP_LPAREN
simple int KW_INT
identifier i
simple = OP_ASS
identifier start
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple int KW_INT
identifier c
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
simple int KW_INT
identifier j
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier j
simple < OP_LT
identifier num16
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier j
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple int KW_INT
identifier curr
simple = OP_ASS
identifier HexCharToValue
simple ( OP_LPAREN
identifier num16
simple [ OP_LSQUARE
identifier j
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier num16
simple [ OP_LSQUARE
identifier j
simple ] OP_RSQUARE
simple = OP_ASS
identifier ValueToHexChar
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier curr
simple * OP_STAR
identifier w
simple + OP_PLUS
identifier c
simple ) OP_RPAREN
simple % OP_MOD
literal 16 int 10000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier c
simple = OP_ASS
simple ( OP_LPAREN
identifier curr
simple * OP_STAR
identifier w
simple + OP_PLUS
identifier c
simple ) OP_RPAREN
simple / OP_DIV
literal 16 int 10000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple > OP_GT
literal 0 int 00000000
simple ) OP_RPAREN
identifier num16
simple += OP_PLUSASS
identifier ValueToHexChar
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier cout
simple << OP_LSHIFT
literal "get " array of 5 char 6765742000
simple << OP_LSHIFT
identifier ppnumber
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple << OP_LSHIFT
literal "   *8  num16 " array of 14 char 2020202A3820206E756D31362000
simple << OP_LSHIFT
identifier num16
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
identifier c
simple = OP_ASS
identifier ppnumber
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple - OP_MINUS
literal '0' char 30
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
simple int KW_INT
identifier j
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier j
simple < OP_LT
identifier num16
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier j
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple int KW_INT
identifier curr
simple = OP_ASS
identifier HexCharToValue
simple ( OP_LPAREN
identifier num16
simple [ OP_LSQUARE
identifier j
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier num16
simple [ OP_LSQUARE
identifier j
simple ] OP_RSQUARE
simple = OP_ASS
identifier ValueToHexChar
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier curr
simple + OP_PLUS
identifier c
simple ) OP_RPAREN
simple % OP_MOD
literal 16 int 10000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier c
simple = OP_ASS
simple ( OP_LPAREN
identifier curr
simple + OP_PLUS
identifier c
simple ) OP_RPAREN
simple / OP_DIV
literal 16 int 10000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple > OP_GT
literal 0 int 00000000
simple ) OP_RPAREN
identifier num16
simple += OP_PLUSASS
identifier ValueToHexChar
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier cout
simple << OP_LSHIFT
literal "get " array of 5 char 6765742000
simple << OP_LSHIFT
identifier ppnumber
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple << OP_LSHIFT
literal "   +" array of 5 char 2020202B00
simple << OP_LSHIFT
identifier ppnumber
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple << OP_LSHIFT
literal "  num16 " array of 9 char 20206E756D31362000
simple << OP_LSHIFT
identifier num16
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
identifier cout
simple << OP_LSHIFT
literal "num16" array of 6 char 6E756D313600
simple << OP_LSHIFT
identifier num16
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple } OP_RBRACE
eof
