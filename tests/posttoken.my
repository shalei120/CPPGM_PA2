invalid #
identifier include
invalid <iostream>
invalid #
identifier include
invalid <sstream>
invalid #
identifier include
invalid <fstream>
invalid #
identifier include
invalid <stdexcept>
invalid #
identifier include
invalid <algorithm>
invalid #
identifier include
invalid <unordered_map>
invalid #
identifier include
invalid <unordered_set>
invalid #
identifier include
invalid <cassert>
invalid #
identifier include
invalid <memory>
invalid #
identifier include
invalid <cstring>
invalid #
identifier include
invalid <cstdint>
invalid #
identifier include
invalid <climits>
invalid #
identifier include
invalid <map>
simple using KW_USING
simple namespace KW_NAMESPACE
identifier std
simple ; OP_SEMICOLON
simple int KW_INT
identifier Utf82Unicode
simple ( OP_LPAREN
identifier vector
simple < OP_LT
simple unsigned KW_UNSIGNED
simple char KW_CHAR
simple > OP_GT
identifier utf8
simple ) OP_RPAREN
simple { OP_LBRACE
simple int KW_INT
identifier result
simple = OP_ASS
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple switch KW_SWITCH
simple ( OP_LPAREN
identifier utf8
simple . OP_DOT
identifier size
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple case KW_CASE
literal 1 int 01000000
simple : OP_COLON
identifier result
simple = OP_ASS
identifier utf8
simple [ OP_LSQUARE
literal 0 int 00000000
simple ] OP_RSQUARE
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 2 int 02000000
simple : OP_COLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier utf8
simple [ OP_LSQUARE
literal 0 int 00000000
simple ] OP_RSQUARE
simple & OP_AMP
literal 0x1f int 1F000000
simple ) OP_RPAREN
simple << OP_LSHIFT
literal 6 int 06000000
simple ) OP_RPAREN
simple + OP_PLUS
simple ( OP_LPAREN
identifier utf8
simple [ OP_LSQUARE
literal 1 int 01000000
simple ] OP_RSQUARE
simple & OP_AMP
literal 0x3f int 3F000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 3 int 03000000
simple : OP_COLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier utf8
simple [ OP_LSQUARE
literal 0 int 00000000
simple ] OP_RSQUARE
simple & OP_AMP
literal 0x0f int 0F000000
simple ) OP_RPAREN
simple << OP_LSHIFT
literal 12 int 0C000000
simple ) OP_RPAREN
simple + OP_PLUS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier utf8
simple [ OP_LSQUARE
literal 1 int 01000000
simple ] OP_RSQUARE
simple & OP_AMP
literal 0x3f int 3F000000
simple ) OP_RPAREN
simple << OP_LSHIFT
literal 6 int 06000000
simple ) OP_RPAREN
simple + OP_PLUS
simple ( OP_LPAREN
identifier utf8
simple [ OP_LSQUARE
literal 2 int 02000000
simple ] OP_RSQUARE
simple & OP_AMP
literal 0x3f int 3F000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 4 int 04000000
simple : OP_COLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier utf8
simple [ OP_LSQUARE
literal 0 int 00000000
simple ] OP_RSQUARE
simple & OP_AMP
literal 0x07 int 07000000
simple ) OP_RPAREN
simple << OP_LSHIFT
literal 18 int 12000000
simple ) OP_RPAREN
simple + OP_PLUS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier utf8
simple [ OP_LSQUARE
literal 1 int 01000000
simple ] OP_RSQUARE
simple & OP_AMP
literal 0x3f int 3F000000
simple ) OP_RPAREN
simple << OP_LSHIFT
literal 12 int 0C000000
simple ) OP_RPAREN
simple + OP_PLUS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier utf8
simple [ OP_LSQUARE
literal 2 int 02000000
simple ] OP_RSQUARE
simple & OP_AMP
literal 0x3f int 3F000000
simple ) OP_RPAREN
simple << OP_LSHIFT
literal 6 int 06000000
simple ) OP_RPAREN
simple + OP_PLUS
simple ( OP_LPAREN
identifier utf8
simple [ OP_LSQUARE
literal 3 int 03000000
simple ] OP_RSQUARE
simple & OP_AMP
literal 0x3f int 3F000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple default KW_DEFAULT
simple : OP_COLON
simple throw KW_THROW
identifier logic_error
simple ( OP_LPAREN
literal "utf8-->unicode failed!" array of 23 char 757466382D2D3E756E69636F6465206661696C65642100
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple return KW_RETURN
identifier result
simple ; OP_SEMICOLON
simple } OP_RBRACE
identifier string
identifier Unicode2Utf8
simple ( OP_LPAREN
simple int KW_INT
identifier u
simple ) OP_RPAREN
simple { OP_LBRACE
identifier string
identifier result
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier u
simple <= OP_LE
literal 0x7f int 7F000000
simple && OP_LAND
identifier u
simple >= OP_GE
literal 0 int 00000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier u
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier u
simple <= OP_LE
literal 0x7ff int FF070000
simple && OP_LAND
identifier u
simple >= OP_GE
literal 0x80 int 80000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
literal 0xC0 int C0000000
simple + OP_PLUS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier u
simple & OP_AMP
literal 0x07c0 int C0070000
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 6 int 06000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
literal 0x80 int 80000000
simple + OP_PLUS
simple ( OP_LPAREN
identifier u
simple & OP_AMP
literal 0x3f int 3F000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier u
simple <= OP_LE
literal 0xffff int FFFF0000
simple && OP_LAND
identifier u
simple >= OP_GE
literal 0x800 int 00080000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
literal 0xe0 int E0000000
simple + OP_PLUS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier u
simple & OP_AMP
literal 0xf000 int 00F00000
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 12 int 0C000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
literal 0x80 int 80000000
simple + OP_PLUS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier u
simple & OP_AMP
literal 0xfc0 int C00F0000
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 6 int 06000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
literal 0x80 int 80000000
simple + OP_PLUS
simple ( OP_LPAREN
identifier u
simple & OP_AMP
literal 0x3f int 3F000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier u
simple <= OP_LE
literal 0x10ffff int FFFF1000
simple && OP_LAND
identifier u
simple >= OP_GE
literal 0x10000 int 00000100
simple ) OP_RPAREN
simple { OP_LBRACE
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
literal 0xf0 int F0000000
simple + OP_PLUS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier u
simple & OP_AMP
literal 0x1c0000 int 00001C00
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 18 int 12000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
literal 0x80 int 80000000
simple + OP_PLUS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier u
simple & OP_AMP
literal 0x3f000 int 00F00300
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 12 int 0C000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
literal 0x80 int 80000000
simple + OP_PLUS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier u
simple & OP_AMP
literal 0xfc0 int C00F0000
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 6 int 06000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
literal 0x80 int 80000000
simple + OP_PLUS
simple ( OP_LPAREN
identifier u
simple & OP_AMP
literal 0x3f int 3F000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
simple throw KW_THROW
identifier logic_error
simple ( OP_LPAREN
literal "utf8 segmentation error!\n" array of 26 char 75746638207365676D656E746174696F6E206572726F72210A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple return KW_RETURN
identifier result
simple ; OP_SEMICOLON
simple } OP_RBRACE
identifier string
identifier Unicode2Utf16
simple ( OP_LPAREN
simple int KW_INT
identifier u
simple ) OP_RPAREN
simple { OP_LBRACE
identifier string
identifier res
simple = OP_ASS
literal "  " array of 3 char 202000
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier u
simple < OP_LT
literal 0x10000 int 00000100
simple ) OP_RPAREN
simple { OP_LBRACE
identifier res
simple [ OP_LSQUARE
literal 1 int 01000000
simple ] OP_RSQUARE
simple = OP_ASS
simple char KW_CHAR
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier u
simple & OP_AMP
literal 0xff00 int 00FF0000
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier res
simple [ OP_LSQUARE
literal 0 int 00000000
simple ] OP_RSQUARE
simple = OP_ASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier u
simple & OP_AMP
literal 0x00ff int FF000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier u
simple <= OP_LE
literal 0x10ffff int FFFF1000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier res
simple = OP_ASS
literal "    " array of 5 char 2020202000
simple ; OP_SEMICOLON
simple int KW_INT
identifier uu
simple = OP_ASS
identifier u
simple - OP_MINUS
literal 0x10000 int 00000100
simple ; OP_SEMICOLON
identifier res
simple [ OP_LSQUARE
literal 0 int 00000000
simple ] OP_RSQUARE
simple = OP_ASS
simple char KW_CHAR
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier uu
simple & OP_AMP
literal 0x3fc00 int 00FC0300
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 10 int 0A000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier res
simple [ OP_LSQUARE
literal 1 int 01000000
simple ] OP_RSQUARE
simple = OP_ASS
simple char KW_CHAR
simple ( OP_LPAREN
literal 0xd8 int D8000000
simple + OP_PLUS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier uu
simple & OP_AMP
literal 0xc0000 int 00000C00
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 18 int 12000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier res
simple [ OP_LSQUARE
literal 2 int 02000000
simple ] OP_RSQUARE
simple = OP_ASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier uu
simple & OP_AMP
literal 0xff int FF000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier res
simple [ OP_LSQUARE
literal 3 int 03000000
simple ] OP_RSQUARE
simple = OP_ASS
simple char KW_CHAR
simple ( OP_LPAREN
literal 0xdc int DC000000
simple + OP_PLUS
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier uu
simple & OP_AMP
literal 0x300 int 00030000
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 8 int 08000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple throw KW_THROW
identifier logic_error
simple ( OP_LPAREN
literal "unicode ---> utf16 error!\n" array of 27 char 756E69636F6465202D2D2D3E207574663136206572726F72210A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple return KW_RETURN
identifier res
simple ; OP_SEMICOLON
simple } OP_RBRACE
identifier vector
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier strUtf82Unicode
simple ( OP_LPAREN
identifier string
identifier u
simple ) OP_RPAREN
simple { OP_LBRACE
identifier vector
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier result
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier i
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier u
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0xe0 int E0000000
simple ) OP_RPAREN
simple == OP_EQ
literal 0xc0 int C0000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier vector
simple < OP_LT
simple unsigned KW_UNSIGNED
simple char KW_CHAR
simple > OP_GT
identifier utf8
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple + OP_PLUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple + OP_PLUS
literal 1 int 01000000
simple ; OP_SEMICOLON
identifier result
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier Utf82Unicode
simple ( OP_LPAREN
identifier utf8
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0xf0 int F0000000
simple ) OP_RPAREN
simple == OP_EQ
literal 0xe0 int E0000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier vector
simple < OP_LT
simple unsigned KW_UNSIGNED
simple char KW_CHAR
simple > OP_GT
identifier utf8
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple + OP_PLUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple + OP_PLUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple + OP_PLUS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier result
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier Utf82Unicode
simple ( OP_LPAREN
identifier utf8
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0xf8 int F8000000
simple ) OP_RPAREN
simple == OP_EQ
literal 0xf0 int F0000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier vector
simple < OP_LT
simple unsigned KW_UNSIGNED
simple char KW_CHAR
simple > OP_GT
identifier utf8
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple + OP_PLUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple + OP_PLUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple + OP_PLUS
literal 3 int 03000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple + OP_PLUS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier result
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier Utf82Unicode
simple ( OP_LPAREN
identifier utf8
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier result
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier u
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple return KW_RETURN
identifier result
simple ; OP_SEMICOLON
simple } OP_RBRACE
identifier string
identifier strUnicode2Utf16
simple ( OP_LPAREN
identifier vector
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier uni
simple ) OP_RPAREN
simple { OP_LBRACE
identifier string
identifier result
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier i
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier uni
simple . OP_DOT
identifier size
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf16
simple ( OP_LPAREN
identifier uni
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple return KW_RETURN
identifier result
simple ; OP_SEMICOLON
simple } OP_RBRACE
identifier string
identifier strUnicode2Utf32
simple ( OP_LPAREN
identifier vector
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier uni
simple ) OP_RPAREN
simple { OP_LBRACE
identifier string
identifier result
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier i
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier uni
simple . OP_DOT
identifier size
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier uni
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0xff int FF000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier uni
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0xff00 int 00FF0000
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier uni
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0xff0000 int 0000FF00
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 16 int 10000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier uni
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0xff000000 unsigned int 000000FF
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 24 int 18000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple return KW_RETURN
identifier result
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple constexpr KW_CONSTEXPR
simple int KW_INT
identifier EndOfFile
simple = OP_ASS
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple constexpr KW_CONSTEXPR
simple int KW_INT
identifier PartialComment
simple = OP_ASS
literal 0x00110000 int 00001100
simple ; OP_SEMICOLON
simple int KW_INT
identifier HexCharToValue
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple switch KW_SWITCH
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple case KW_CASE
literal '0' char 30
simple : OP_COLON
simple return KW_RETURN
literal 0 int 00000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '1' char 31
simple : OP_COLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '2' char 32
simple : OP_COLON
simple return KW_RETURN
literal 2 int 02000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '3' char 33
simple : OP_COLON
simple return KW_RETURN
literal 3 int 03000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '4' char 34
simple : OP_COLON
simple return KW_RETURN
literal 4 int 04000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '5' char 35
simple : OP_COLON
simple return KW_RETURN
literal 5 int 05000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '6' char 36
simple : OP_COLON
simple return KW_RETURN
literal 6 int 06000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '7' char 37
simple : OP_COLON
simple return KW_RETURN
literal 7 int 07000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '8' char 38
simple : OP_COLON
simple return KW_RETURN
literal 8 int 08000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal '9' char 39
simple : OP_COLON
simple return KW_RETURN
literal 9 int 09000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'A' char 41
simple : OP_COLON
simple return KW_RETURN
literal 10 int 0A000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'a' char 61
simple : OP_COLON
simple return KW_RETURN
literal 10 int 0A000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'B' char 42
simple : OP_COLON
simple return KW_RETURN
literal 11 int 0B000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'b' char 62
simple : OP_COLON
simple return KW_RETURN
literal 11 int 0B000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'C' char 43
simple : OP_COLON
simple return KW_RETURN
literal 12 int 0C000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'c' char 63
simple : OP_COLON
simple return KW_RETURN
literal 12 int 0C000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'D' char 44
simple : OP_COLON
simple return KW_RETURN
literal 13 int 0D000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'd' char 64
simple : OP_COLON
simple return KW_RETURN
literal 13 int 0D000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'E' char 45
simple : OP_COLON
simple return KW_RETURN
literal 14 int 0E000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'e' char 65
simple : OP_COLON
simple return KW_RETURN
literal 14 int 0E000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'F' char 46
simple : OP_COLON
simple return KW_RETURN
literal 15 int 0F000000
simple ; OP_SEMICOLON
simple case KW_CASE
literal 'f' char 66
simple : OP_COLON
simple return KW_RETURN
literal 15 int 0F000000
simple ; OP_SEMICOLON
simple default KW_DEFAULT
simple : OP_COLON
simple throw KW_THROW
identifier logic_error
simple ( OP_LPAREN
literal "HexCharToValue of nonhex char" array of 30 char 48657843686172546F56616C7565206F66206E6F6E686578206368617200
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple const KW_CONST
identifier vector
simple < OP_LT
identifier pair
simple < OP_LT
simple int KW_INT
simple , OP_COMMA
simple int KW_INT
simple >> OP_RSHIFT
identifier AnnexE1_Allowed_RangesSorted
simple = OP_ASS
simple { OP_LBRACE
simple { OP_LBRACE
literal 0xA8 int A8000000
simple , OP_COMMA
literal 0xA8 int A8000000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xAA int AA000000
simple , OP_COMMA
literal 0xAA int AA000000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xAD int AD000000
simple , OP_COMMA
literal 0xAD int AD000000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xAF int AF000000
simple , OP_COMMA
literal 0xAF int AF000000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xB2 int B2000000
simple , OP_COMMA
literal 0xB5 int B5000000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xB7 int B7000000
simple , OP_COMMA
literal 0xBA int BA000000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xBC int BC000000
simple , OP_COMMA
literal 0xBE int BE000000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xC0 int C0000000
simple , OP_COMMA
literal 0xD6 int D6000000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xD8 int D8000000
simple , OP_COMMA
literal 0xF6 int F6000000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xF8 int F8000000
simple , OP_COMMA
literal 0xFF int FF000000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x100 int 00010000
simple , OP_COMMA
literal 0x167F int 7F160000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x1681 int 81160000
simple , OP_COMMA
literal 0x180D int 0D180000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x180F int 0F180000
simple , OP_COMMA
literal 0x1FFF int FF1F0000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x200B int 0B200000
simple , OP_COMMA
literal 0x200D int 0D200000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x202A int 2A200000
simple , OP_COMMA
literal 0x202E int 2E200000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x203F int 3F200000
simple , OP_COMMA
literal 0x2040 int 40200000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x2054 int 54200000
simple , OP_COMMA
literal 0x2054 int 54200000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x2060 int 60200000
simple , OP_COMMA
literal 0x206F int 6F200000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x2070 int 70200000
simple , OP_COMMA
literal 0x218F int 8F210000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x2460 int 60240000
simple , OP_COMMA
literal 0x24FF int FF240000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x2776 int 76270000
simple , OP_COMMA
literal 0x2793 int 93270000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x2C00 int 002C0000
simple , OP_COMMA
literal 0x2DFF int FF2D0000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x2E80 int 802E0000
simple , OP_COMMA
literal 0x2FFF int FF2F0000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x3004 int 04300000
simple , OP_COMMA
literal 0x3007 int 07300000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x3021 int 21300000
simple , OP_COMMA
literal 0x302F int 2F300000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x3031 int 31300000
simple , OP_COMMA
literal 0x303F int 3F300000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x3040 int 40300000
simple , OP_COMMA
literal 0xD7FF int FFD70000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xF900 int 00F90000
simple , OP_COMMA
literal 0xFD3D int 3DFD0000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xFD40 int 40FD0000
simple , OP_COMMA
literal 0xFDCF int CFFD0000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xFDF0 int F0FD0000
simple , OP_COMMA
literal 0xFE44 int 44FE0000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xFE47 int 47FE0000
simple , OP_COMMA
literal 0xFFFD int FDFF0000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x10000 int 00000100
simple , OP_COMMA
literal 0x1FFFD int FDFF0100
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x20000 int 00000200
simple , OP_COMMA
literal 0x2FFFD int FDFF0200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x30000 int 00000300
simple , OP_COMMA
literal 0x3FFFD int FDFF0300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x40000 int 00000400
simple , OP_COMMA
literal 0x4FFFD int FDFF0400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x50000 int 00000500
simple , OP_COMMA
literal 0x5FFFD int FDFF0500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x60000 int 00000600
simple , OP_COMMA
literal 0x6FFFD int FDFF0600
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x70000 int 00000700
simple , OP_COMMA
literal 0x7FFFD int FDFF0700
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x80000 int 00000800
simple , OP_COMMA
literal 0x8FFFD int FDFF0800
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x90000 int 00000900
simple , OP_COMMA
literal 0x9FFFD int FDFF0900
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xA0000 int 00000A00
simple , OP_COMMA
literal 0xAFFFD int FDFF0A00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xB0000 int 00000B00
simple , OP_COMMA
literal 0xBFFFD int FDFF0B00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xC0000 int 00000C00
simple , OP_COMMA
literal 0xCFFFD int FDFF0C00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xD0000 int 00000D00
simple , OP_COMMA
literal 0xDFFFD int FDFF0D00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xE0000 int 00000E00
simple , OP_COMMA
literal 0xEFFFD int FDFF0E00
simple } OP_RBRACE
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple const KW_CONST
identifier vector
simple < OP_LT
identifier pair
simple < OP_LT
simple int KW_INT
simple , OP_COMMA
simple int KW_INT
simple >> OP_RSHIFT
identifier AnnexE2_DisallowedInitially_RangesSorted
simple = OP_ASS
simple { OP_LBRACE
simple { OP_LBRACE
literal 0x300 int 00030000
simple , OP_COMMA
literal 0x36F int 6F030000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x1DC0 int C01D0000
simple , OP_COMMA
literal 0x1DFF int FF1D0000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0x20D0 int D0200000
simple , OP_COMMA
literal 0x20FF int FF200000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal 0xFE20 int 20FE0000
simple , OP_COMMA
literal 0xFE2F int 2FFE0000
simple } OP_RBRACE
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple bool KW_BOOL
identifier Is_Initial_Banned
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier i
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier AnnexE2_DisallowedInitially_RangesSorted
simple . OP_DOT
identifier size
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple >= OP_GE
identifier AnnexE2_DisallowedInitially_RangesSorted
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple . OP_DOT
identifier first
simple && OP_LAND
identifier c
simple <= OP_LE
identifier AnnexE2_DisallowedInitially_RangesSorted
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple . OP_DOT
identifier second
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
simple true KW_TRUE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple return KW_RETURN
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple const KW_CONST
identifier unordered_set
simple < OP_LT
identifier string
simple > OP_GT
identifier Digraph_IdentifierLike_Operators
simple = OP_ASS
simple { OP_LBRACE
literal "new" array of 4 char 6E657700
simple , OP_COMMA
literal "delete" array of 7 char 64656C65746500
simple , OP_COMMA
literal "and" array of 4 char 616E6400
simple , OP_COMMA
literal "and_eq" array of 7 char 616E645F657100
simple , OP_COMMA
literal "bitand" array of 7 char 626974616E6400
simple , OP_COMMA
literal "bitor" array of 6 char 6269746F7200
simple , OP_COMMA
literal "compl" array of 6 char 636F6D706C00
simple , OP_COMMA
literal "not" array of 4 char 6E6F7400
simple , OP_COMMA
literal "not_eq" array of 7 char 6E6F745F657100
simple , OP_COMMA
literal "or" array of 3 char 6F7200
simple , OP_COMMA
literal "or_eq" array of 6 char 6F725F657100
simple , OP_COMMA
literal "xor" array of 4 char 786F7200
simple , OP_COMMA
literal "xor_eq" array of 7 char 786F725F657100
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple const KW_CONST
identifier unordered_set
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier SimpleEscapeSequence_CodePoints
simple = OP_ASS
simple { OP_LBRACE
literal '\'' char 27
simple , OP_COMMA
literal '"' char 22
simple , OP_COMMA
literal '?' char 3F
simple , OP_COMMA
literal '\\' char 5C
simple , OP_COMMA
literal 'a' char 61
simple , OP_COMMA
literal 'b' char 62
simple , OP_COMMA
literal 'f' char 66
simple , OP_COMMA
literal 'n' char 6E
simple , OP_COMMA
literal 'r' char 72
simple , OP_COMMA
literal 't' char 74
simple , OP_COMMA
literal 'v' char 76
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple const KW_CONST
identifier unordered_set
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier Octal_Digit
simple = OP_ASS
simple { OP_LBRACE
literal '0' char 30
simple , OP_COMMA
literal '1' char 31
simple , OP_COMMA
literal '2' char 32
simple , OP_COMMA
literal '3' char 33
simple , OP_COMMA
literal '4' char 34
simple , OP_COMMA
literal '5' char 35
simple , OP_COMMA
literal '6' char 36
simple , OP_COMMA
literal '7' char 37
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple const KW_CONST
identifier unordered_set
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier Hexadecimal_Digit
simple = OP_ASS
simple { OP_LBRACE
literal '0' char 30
simple , OP_COMMA
literal '1' char 31
simple , OP_COMMA
literal '2' char 32
simple , OP_COMMA
literal '3' char 33
simple , OP_COMMA
literal '4' char 34
simple , OP_COMMA
literal '5' char 35
simple , OP_COMMA
literal '6' char 36
simple , OP_COMMA
literal '7' char 37
simple , OP_COMMA
literal '8' char 38
simple , OP_COMMA
literal '9' char 39
simple , OP_COMMA
literal 'a' char 61
simple , OP_COMMA
literal 'b' char 62
simple , OP_COMMA
literal 'c' char 63
simple , OP_COMMA
literal 'd' char 64
simple , OP_COMMA
literal 'e' char 65
simple , OP_COMMA
literal 'f' char 66
simple , OP_COMMA
literal 'A' char 41
simple , OP_COMMA
literal 'B' char 42
simple , OP_COMMA
literal 'C' char 43
simple , OP_COMMA
literal 'D' char 44
simple , OP_COMMA
literal 'E' char 45
simple , OP_COMMA
literal 'F' char 46
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple const KW_CONST
identifier unordered_set
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier Nondigit
simple = OP_ASS
simple { OP_LBRACE
literal 'a' char 61
simple , OP_COMMA
literal 'b' char 62
simple , OP_COMMA
literal 'c' char 63
simple , OP_COMMA
literal 'd' char 64
simple , OP_COMMA
literal 'e' char 65
simple , OP_COMMA
literal 'f' char 66
simple , OP_COMMA
literal 'g' char 67
simple , OP_COMMA
literal 'h' char 68
simple , OP_COMMA
literal 'i' char 69
simple , OP_COMMA
literal 'j' char 6A
simple , OP_COMMA
literal 'k' char 6B
simple , OP_COMMA
literal 'l' char 6C
simple , OP_COMMA
literal 'm' char 6D
simple , OP_COMMA
literal 'n' char 6E
simple , OP_COMMA
literal 'o' char 6F
simple , OP_COMMA
literal 'p' char 70
simple , OP_COMMA
literal 'q' char 71
simple , OP_COMMA
literal 'r' char 72
simple , OP_COMMA
literal 's' char 73
simple , OP_COMMA
literal 't' char 74
simple , OP_COMMA
literal 'u' char 75
simple , OP_COMMA
literal 'v' char 76
simple , OP_COMMA
literal 'w' char 77
simple , OP_COMMA
literal 'x' char 78
simple , OP_COMMA
literal 'y' char 79
simple , OP_COMMA
literal 'z' char 7A
simple , OP_COMMA
literal 'A' char 41
simple , OP_COMMA
literal 'B' char 42
simple , OP_COMMA
literal 'C' char 43
simple , OP_COMMA
literal 'D' char 44
simple , OP_COMMA
literal 'E' char 45
simple , OP_COMMA
literal 'F' char 46
simple , OP_COMMA
literal 'G' char 47
simple , OP_COMMA
literal 'H' char 48
simple , OP_COMMA
literal 'I' char 49
simple , OP_COMMA
literal 'J' char 4A
simple , OP_COMMA
literal 'K' char 4B
simple , OP_COMMA
literal 'L' char 4C
simple , OP_COMMA
literal 'M' char 4D
simple , OP_COMMA
literal 'N' char 4E
simple , OP_COMMA
literal 'O' char 4F
simple , OP_COMMA
literal 'P' char 50
simple , OP_COMMA
literal 'Q' char 51
simple , OP_COMMA
literal 'R' char 52
simple , OP_COMMA
literal 'S' char 53
simple , OP_COMMA
literal 'T' char 54
simple , OP_COMMA
literal 'U' char 55
simple , OP_COMMA
literal 'V' char 56
simple , OP_COMMA
literal 'W' char 57
simple , OP_COMMA
literal 'X' char 58
simple , OP_COMMA
literal 'Y' char 59
simple , OP_COMMA
literal 'Z' char 5A
simple , OP_COMMA
literal '_' char 5F
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple const KW_CONST
identifier unordered_set
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier Digit
simple = OP_ASS
simple { OP_LBRACE
literal '0' char 30
simple , OP_COMMA
literal '1' char 31
simple , OP_COMMA
literal '2' char 32
simple , OP_COMMA
literal '3' char 33
simple , OP_COMMA
literal '4' char 34
simple , OP_COMMA
literal '5' char 35
simple , OP_COMMA
literal '6' char 36
simple , OP_COMMA
literal '7' char 37
simple , OP_COMMA
literal '8' char 38
simple , OP_COMMA
literal '9' char 39
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple bool KW_BOOL
identifier Is_identifier_nondigit
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier i
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier AnnexE1_Allowed_RangesSorted
simple . OP_DOT
identifier size
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple >= OP_GE
identifier AnnexE1_Allowed_RangesSorted
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple . OP_DOT
identifier first
simple && OP_LAND
identifier c
simple <= OP_LE
identifier AnnexE1_Allowed_RangesSorted
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple . OP_DOT
identifier second
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
simple true KW_TRUE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier Nondigit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Nondigit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple return KW_RETURN
simple true KW_TRUE
simple ; OP_SEMICOLON
simple return KW_RETURN
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple bool KW_BOOL
identifier Is_dchar
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple != OP_NE
literal ' ' char 20
simple && OP_LAND
identifier c
simple != OP_NE
literal '(' char 28
simple && OP_LAND
identifier c
simple != OP_NE
literal ')' char 29
simple && OP_LAND
identifier c
simple != OP_NE
literal '\\' char 5C
simple && OP_LAND
identifier c
simple != OP_NE
literal '\t' char 09
simple && OP_LAND
identifier c
simple != OP_NE
literal '\v' char 0B
simple && OP_LAND
identifier c
simple != OP_NE
literal '\f' char 0C
simple && OP_LAND
identifier c
simple != OP_NE
literal '\n' char 0A
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
simple true KW_TRUE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple return KW_RETURN
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple bool KW_BOOL
identifier Is_cchar
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple != OP_NE
literal '\'' char 27
simple && OP_LAND
identifier c
simple != OP_NE
literal '\\' char 5C
simple && OP_LAND
identifier c
simple != OP_NE
literal '\n' char 0A
simple ) OP_RPAREN
simple return KW_RETURN
simple true KW_TRUE
simple ; OP_SEMICOLON
simple return KW_RETURN
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple bool KW_BOOL
identifier Is_schar
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple != OP_NE
literal '\"' char 22
simple && OP_LAND
identifier c
simple != OP_NE
literal '\\' char 5C
simple && OP_LAND
identifier c
simple != OP_NE
literal '\n' char 0A
simple ) OP_RPAREN
simple return KW_RETURN
simple true KW_TRUE
simple ; OP_SEMICOLON
simple return KW_RETURN
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple bool KW_BOOL
identifier Is_hchar
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple != OP_NE
literal '>' char 3E
simple && OP_LAND
identifier c
simple != OP_NE
literal '\n' char 0A
simple ) OP_RPAREN
simple return KW_RETURN
simple true KW_TRUE
simple ; OP_SEMICOLON
simple return KW_RETURN
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple bool KW_BOOL
identifier Is_qchar
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple != OP_NE
literal '\"' char 22
simple && OP_LAND
identifier c
simple != OP_NE
literal '\n' char 0A
simple ) OP_RPAREN
simple return KW_RETURN
simple true KW_TRUE
simple ; OP_SEMICOLON
simple return KW_RETURN
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple bool KW_BOOL
identifier Is_RawStringPointer
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier string
identifier GetRawString
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple class KW_CLASS
identifier PPTranslator
simple { OP_LBRACE
simple public KW_PUBLIC
simple : OP_COLON
simple const KW_CONST
simple static KW_STATIC
simple int KW_INT
identifier RawStringBase
simple = OP_ASS
literal 0x00120000 int 00001200
simple ; OP_SEMICOLON
simple static KW_STATIC
identifier vector
simple < OP_LT
identifier string
simple > OP_GT
identifier RawStrings
simple ; OP_SEMICOLON
simple static KW_STATIC
identifier string
identifier RawString
simple , OP_COMMA
identifier delimiter
simple ; OP_SEMICOLON
identifier PPTranslator
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple } OP_RBRACE
simple static KW_STATIC
identifier vector
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier Translate
simple ( OP_LPAREN
identifier string
identifier s
simple ) OP_RPAREN
simple { OP_LBRACE
identifier vector
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier results
simple ; OP_SEMICOLON
simple int KW_INT
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple int KW_INT
identifier result
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple bool KW_BOOL
identifier exitsuccess
simple = OP_ASS
simple true KW_TRUE
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier i
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier s
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple switch KW_SWITCH
simple ( OP_LPAREN
identifier state
simple ) OP_RPAREN
simple { OP_LBRACE
simple case KW_CASE
literal 0 int 00000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '\\' char 5C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '?' char 3F
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 10 int 0A000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0xe0 int E0000000
simple ) OP_RPAREN
simple == OP_EQ
literal 0xc0 int C0000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier vector
simple < OP_LT
simple unsigned KW_UNSIGNED
simple char KW_CHAR
simple > OP_GT
identifier utf8
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple + OP_PLUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple + OP_PLUS
literal 1 int 01000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier Utf82Unicode
simple ( OP_LPAREN
identifier utf8
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0xf0 int F0000000
simple ) OP_RPAREN
simple == OP_EQ
literal 0xe0 int E0000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier vector
simple < OP_LT
simple unsigned KW_UNSIGNED
simple char KW_CHAR
simple > OP_GT
identifier utf8
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple + OP_PLUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple + OP_PLUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple + OP_PLUS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier Utf82Unicode
simple ( OP_LPAREN
identifier utf8
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0xf8 int F8000000
simple ) OP_RPAREN
simple == OP_EQ
literal 0xf0 int F0000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier vector
simple < OP_LT
simple unsigned KW_UNSIGNED
simple char KW_CHAR
simple > OP_GT
identifier utf8
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple + OP_PLUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple + OP_PLUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier utf8
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple + OP_PLUS
literal 3 int 03000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple + OP_PLUS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier Utf82Unicode
simple ( OP_LPAREN
identifier utf8
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
simple - OP_MINUS
literal 1 int 01000000
simple && OP_LAND
identifier i
simple == OP_EQ
identifier s
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
simple { OP_LBRACE
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0xf8 int F8000000
simple ) OP_RPAREN
simple == OP_EQ
literal 0xf8 int F8000000
simple ) OP_RPAREN
simple throw KW_THROW
identifier logic_error
simple ( OP_LPAREN
literal "utf8 invalid unit (111111xx)\n" array of 30 char 7574663820696E76616C696420756E697420283131313131317878290A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '/' char 2F
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 16 int 10000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal 'R' char 52
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 20 int 14000000
simple ; OP_SEMICOLON
identifier RawString
simple += OP_PLUSASS
literal 'R' char 52
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 1 int 01000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal 'u' char 75
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 6 int 06000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple { OP_LBRACE
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 2 int 02000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
identifier result
simple << OP_LSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 3 int 03000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
identifier result
simple << OP_LSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 4 int 04000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
identifier result
simple << OP_LSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 4 int 04000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 5 int 05000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
identifier result
simple << OP_LSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 5 int 05000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 6 int 06000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 7 int 07000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
identifier result
simple << OP_LSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 7 int 07000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 8 int 08000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
identifier result
simple << OP_LSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 8 int 08000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 9 int 09000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
identifier result
simple << OP_LSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 4 int 04000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 9 int 09000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 12 int 0C000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
identifier result
simple << OP_LSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 5 int 05000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 10 int 0A000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '?' char 3F
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 11 int 0B000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '?' char 3F
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 11 int 0B000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '=' char 3D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple = OP_ASS
literal '#' char 23
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '/' char 2F
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple = OP_ASS
literal '\\' char 5C
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple = OP_ASS
literal '^' char 5E
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '(' char 28
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple = OP_ASS
literal '[' char 5B
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal ')' char 29
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple = OP_ASS
literal ']' char 5D
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '!' char 21
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple = OP_ASS
literal '|' char 7C
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '<' char 3C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple = OP_ASS
literal '{' char 7B
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '>' char 3E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple = OP_ASS
literal '}' char 7D
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '-' char 2D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple = OP_ASS
literal '~' char 7E
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '?' char 3F
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 12 int 0C000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 13 int 0D000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
identifier result
simple << OP_LSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 6 int 06000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 13 int 0D000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 14 int 0E000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
identifier result
simple << OP_LSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 7 int 07000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 14 int 0E000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 15 int 0F000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
identifier result
simple << OP_LSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 8 int 08000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 15 int 0F000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
simple ( OP_LPAREN
identifier result
simple << OP_LSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 9 int 09000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '\\' char 5C
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 16 int 10000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '*' char 2A
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 17 int 11000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '/' char 2F
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 19 int 13000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal '/' char 2F
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 17 int 11000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '*' char 2A
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 18 int 12000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
identifier EndOfFile
simple ) OP_RPAREN
simple { OP_LBRACE
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier PartialComment
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier state
simple = OP_ASS
literal 17 int 11000000
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 18 int 12000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '/' char 2F
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal ' ' char 20
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '*' char 2A
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 18 int 12000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
identifier EndOfFile
simple ) OP_RPAREN
simple { OP_LBRACE
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier PartialComment
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier state
simple = OP_ASS
literal 17 int 11000000
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 19 int 13000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal 0x0a int 0A000000
simple || OP_LOR
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal ' ' char 20
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal 0x0a int 0A000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 19 int 13000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 20 int 14000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 21 int 15000000
simple ; OP_SEMICOLON
identifier RawString
simple += OP_PLUSASS
literal '\"' char 22
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal 'R' char 52
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier RawString
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 21 int 15000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_dchar
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 21 int 15000000
simple ; OP_SEMICOLON
identifier RawString
simple += OP_PLUSASS
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ; OP_SEMICOLON
identifier delimiter
simple += OP_PLUSASS
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '(' char 28
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 22 int 16000000
simple ; OP_SEMICOLON
identifier RawString
simple += OP_PLUSASS
literal '(' char 28
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple throw KW_THROW
simple new KW_NEW
identifier logic_error
simple ( OP_LPAREN
literal "invalid characters in raw string delimiter" array of 43 char 696E76616C6964206368617261637465727320696E2072617720737472696E672064656C696D6974657200
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 22 int 16000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal ')' char 29
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 23 int 17000000
simple ; OP_SEMICOLON
identifier RawString
simple += OP_PLUSASS
literal ')' char 29
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 22 int 16000000
simple ; OP_SEMICOLON
identifier RawString
simple += OP_PLUSASS
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 23 int 17000000
simple : OP_COLON
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier j
simple = OP_ASS
identifier i
simple , OP_COMMA
identifier k
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier k
simple < OP_LT
identifier delimiter
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier j
simple ++ OP_INC
simple , OP_COMMA
identifier k
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier j
simple ] OP_RSQUARE
simple != OP_NE
identifier delimiter
simple [ OP_LSQUARE
identifier k
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 22 int 16000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier j
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
identifier exitsuccess
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier RawString
simple += OP_PLUSASS
identifier s
simple [ OP_LSQUARE
identifier j
simple ] OP_RSQUARE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier exitsuccess
simple ) OP_RPAREN
simple { OP_LBRACE
identifier i
simple = OP_ASS
identifier i
simple + OP_PLUS
identifier delimiter
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier RawString
simple += OP_PLUSASS
identifier s
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ; OP_SEMICOLON
identifier delimiter
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier RawStrings
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier RawString
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier RawString
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier RawStringBase
simple + OP_PLUS
identifier RawStrings
simple . OP_DOT
identifier size
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 22 int 16000000
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
identifier exitsuccess
simple = OP_ASS
simple true KW_TRUE
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple default KW_DEFAULT
simple : OP_COLON
simple throw KW_THROW
simple new KW_NEW
identifier logic_error
simple ( OP_LPAREN
literal "little DFA failed? What the hell is it?\n" array of 41 char 6C6974746C6520444641206661696C65643F2057686174207468652068656C6C2069732069743F0A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
simple ! OP_LNOT
identifier results
simple . OP_DOT
identifier empty
simple ( OP_LPAREN
simple ) OP_RPAREN
simple && OP_LAND
identifier results
simple . OP_DOT
identifier back
simple ( OP_LPAREN
simple ) OP_RPAREN
simple != OP_NE
literal 0x0a int 0A000000
simple ) OP_RPAREN
identifier results
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
literal 0x0a int 0A000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple return KW_RETURN
identifier results
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple ; OP_SEMICOLON
identifier vector
simple < OP_LT
identifier string
simple > OP_GT
identifier PPTranslator
simple :: OP_COLON2
identifier RawStrings
simple ; OP_SEMICOLON
identifier string
identifier PPTranslator
simple :: OP_COLON2
identifier RawString
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier string
identifier PPTranslator
simple :: OP_COLON2
identifier delimiter
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
simple bool KW_BOOL
identifier Is_RawStringPointer
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier c
simple >= OP_GE
identifier PPTranslator
simple :: OP_COLON2
identifier RawStringBase
simple ; OP_SEMICOLON
simple } OP_RBRACE
identifier string
identifier GetRawString
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier PPTranslator
simple :: OP_COLON2
identifier RawStrings
simple [ OP_LSQUARE
identifier c
simple - OP_MINUS
identifier PPTranslator
simple :: OP_COLON2
identifier RawStringBase
simple ] OP_RSQUARE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple enum KW_ENUM
identifier EFundamentalType
simple { OP_LBRACE
identifier FT_SIGNED_CHAR
simple , OP_COMMA
identifier FT_SHORT_INT
simple , OP_COMMA
identifier FT_INT
simple , OP_COMMA
identifier FT_LONG_INT
simple , OP_COMMA
identifier FT_LONG_LONG_INT
simple , OP_COMMA
identifier FT_UNSIGNED_CHAR
simple , OP_COMMA
identifier FT_UNSIGNED_SHORT_INT
simple , OP_COMMA
identifier FT_UNSIGNED_INT
simple , OP_COMMA
identifier FT_UNSIGNED_LONG_INT
simple , OP_COMMA
identifier FT_UNSIGNED_LONG_LONG_INT
simple , OP_COMMA
identifier FT_WCHAR_T
simple , OP_COMMA
identifier FT_CHAR
simple , OP_COMMA
identifier FT_CHAR16_T
simple , OP_COMMA
identifier FT_CHAR32_T
simple , OP_COMMA
identifier FT_BOOL
simple , OP_COMMA
identifier FT_FLOAT
simple , OP_COMMA
identifier FT_DOUBLE
simple , OP_COMMA
identifier FT_LONG_DOUBLE
simple , OP_COMMA
identifier FT_VOID
simple , OP_COMMA
identifier FT_NULLPTR_T
simple , OP_COMMA
identifier FT_INVALID
simple , OP_COMMA
identifier FT_DEFAULT
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple template KW_TEMPLATE
simple < OP_LT
simple typename KW_TYPENAME
identifier T
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple signed KW_SIGNED
simple char KW_CHAR
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_SIGNED_CHAR
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple short KW_SHORT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_SHORT_INT
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_INT
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_LONG_INT
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_LONG_LONG_INT
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple char KW_CHAR
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_UNSIGNED_CHAR
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple short KW_SHORT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_UNSIGNED_SHORT_INT
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_UNSIGNED_INT
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_UNSIGNED_LONG_INT
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_UNSIGNED_LONG_LONG_INT
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple wchar_t KW_WCHAR_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_WCHAR_T
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple char KW_CHAR
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_CHAR
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple char16_t KW_CHAR16_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_CHAR16_T
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple char32_t KW_CHAR32_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_CHAR32_T
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple bool KW_BOOL
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_BOOL
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple float KW_FLOAT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_FLOAT
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple double KW_DOUBLE
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_DOUBLE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple double KW_DOUBLE
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_LONG_DOUBLE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
simple void KW_VOID
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_VOID
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple template KW_TEMPLATE
simple < OP_LT
simple > OP_GT
simple constexpr KW_CONSTEXPR
identifier EFundamentalType
identifier FundamentalTypeOf
simple < OP_LT
identifier nullptr_t
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple return KW_RETURN
identifier FT_NULLPTR_T
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple const KW_CONST
identifier map
simple < OP_LT
identifier EFundamentalType
simple , OP_COMMA
identifier string
simple > OP_GT
identifier FundamentalTypeToStringMap
simple { OP_LBRACE
simple { OP_LBRACE
identifier FT_SIGNED_CHAR
simple , OP_COMMA
literal "signed char" array of 12 char 7369676E6564206368617200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_SHORT_INT
simple , OP_COMMA
literal "short int" array of 10 char 73686F727420696E7400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_INT
simple , OP_COMMA
literal "int" array of 4 char 696E7400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_LONG_INT
simple , OP_COMMA
literal "long int" array of 9 char 6C6F6E6720696E7400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_LONG_LONG_INT
simple , OP_COMMA
literal "long long int" array of 14 char 6C6F6E67206C6F6E6720696E7400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_UNSIGNED_CHAR
simple , OP_COMMA
literal "unsigned char" array of 14 char 756E7369676E6564206368617200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_UNSIGNED_SHORT_INT
simple , OP_COMMA
literal "unsigned short int" array of 19 char 756E7369676E65642073686F727420696E7400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_UNSIGNED_INT
simple , OP_COMMA
literal "unsigned int" array of 13 char 756E7369676E656420696E7400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_UNSIGNED_LONG_INT
simple , OP_COMMA
literal "unsigned long int" array of 18 char 756E7369676E6564206C6F6E6720696E7400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_UNSIGNED_LONG_LONG_INT
simple , OP_COMMA
literal "unsigned long long int" array of 23 char 756E7369676E6564206C6F6E67206C6F6E6720696E7400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_WCHAR_T
simple , OP_COMMA
literal "wchar_t" array of 8 char 77636861725F7400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_CHAR
simple , OP_COMMA
literal "char" array of 5 char 6368617200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_CHAR16_T
simple , OP_COMMA
literal "char16_t" array of 9 char 6368617231365F7400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_CHAR32_T
simple , OP_COMMA
literal "char32_t" array of 9 char 6368617233325F7400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_BOOL
simple , OP_COMMA
literal "bool" array of 5 char 626F6F6C00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_FLOAT
simple , OP_COMMA
literal "float" array of 6 char 666C6F617400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_DOUBLE
simple , OP_COMMA
literal "double" array of 7 char 646F75626C6500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_LONG_DOUBLE
simple , OP_COMMA
literal "long double" array of 12 char 6C6F6E6720646F75626C6500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_VOID
simple , OP_COMMA
literal "void" array of 5 char 766F696400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier FT_NULLPTR_T
simple , OP_COMMA
literal "nullptr_t" array of 10 char 6E756C6C7074725F7400
simple } OP_RBRACE
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple enum KW_ENUM
identifier ETokenType
simple { OP_LBRACE
identifier KW_ALIGNAS
simple , OP_COMMA
identifier KW_ALIGNOF
simple , OP_COMMA
identifier KW_ASM
simple , OP_COMMA
identifier KW_AUTO
simple , OP_COMMA
identifier KW_BOOL
simple , OP_COMMA
identifier KW_BREAK
simple , OP_COMMA
identifier KW_CASE
simple , OP_COMMA
identifier KW_CATCH
simple , OP_COMMA
identifier KW_CHAR
simple , OP_COMMA
identifier KW_CHAR16_T
simple , OP_COMMA
identifier KW_CHAR32_T
simple , OP_COMMA
identifier KW_CLASS
simple , OP_COMMA
identifier KW_CONST
simple , OP_COMMA
identifier KW_CONSTEXPR
simple , OP_COMMA
identifier KW_CONST_CAST
simple , OP_COMMA
identifier KW_CONTINUE
simple , OP_COMMA
identifier KW_DECLTYPE
simple , OP_COMMA
identifier KW_DEFAULT
simple , OP_COMMA
identifier KW_DELETE
simple , OP_COMMA
identifier KW_DO
simple , OP_COMMA
identifier KW_DOUBLE
simple , OP_COMMA
identifier KW_DYNAMIC_CAST
simple , OP_COMMA
identifier KW_ELSE
simple , OP_COMMA
identifier KW_ENUM
simple , OP_COMMA
identifier KW_EXPLICIT
simple , OP_COMMA
identifier KW_EXPORT
simple , OP_COMMA
identifier KW_EXTERN
simple , OP_COMMA
identifier KW_FALSE
simple , OP_COMMA
identifier KW_FLOAT
simple , OP_COMMA
identifier KW_FOR
simple , OP_COMMA
identifier KW_FRIEND
simple , OP_COMMA
identifier KW_GOTO
simple , OP_COMMA
identifier KW_IF
simple , OP_COMMA
identifier KW_INLINE
simple , OP_COMMA
identifier KW_INT
simple , OP_COMMA
identifier KW_LONG
simple , OP_COMMA
identifier KW_MUTABLE
simple , OP_COMMA
identifier KW_NAMESPACE
simple , OP_COMMA
identifier KW_NEW
simple , OP_COMMA
identifier KW_NOEXCEPT
simple , OP_COMMA
identifier KW_NULLPTR
simple , OP_COMMA
identifier KW_OPERATOR
simple , OP_COMMA
identifier KW_PRIVATE
simple , OP_COMMA
identifier KW_PROTECTED
simple , OP_COMMA
identifier KW_PUBLIC
simple , OP_COMMA
identifier KW_REGISTER
simple , OP_COMMA
identifier KW_REINTERPET_CAST
simple , OP_COMMA
identifier KW_RETURN
simple , OP_COMMA
identifier KW_SHORT
simple , OP_COMMA
identifier KW_SIGNED
simple , OP_COMMA
identifier KW_SIZEOF
simple , OP_COMMA
identifier KW_STATIC
simple , OP_COMMA
identifier KW_STATIC_ASSERT
simple , OP_COMMA
identifier KW_STATIC_CAST
simple , OP_COMMA
identifier KW_STRUCT
simple , OP_COMMA
identifier KW_SWITCH
simple , OP_COMMA
identifier KW_TEMPLATE
simple , OP_COMMA
identifier KW_THIS
simple , OP_COMMA
identifier KW_THREAD_LOCAL
simple , OP_COMMA
identifier KW_THROW
simple , OP_COMMA
identifier KW_TRUE
simple , OP_COMMA
identifier KW_TRY
simple , OP_COMMA
identifier KW_TYPEDEF
simple , OP_COMMA
identifier KW_TYPEID
simple , OP_COMMA
identifier KW_TYPENAME
simple , OP_COMMA
identifier KW_UNION
simple , OP_COMMA
identifier KW_UNSIGNED
simple , OP_COMMA
identifier KW_USING
simple , OP_COMMA
identifier KW_VIRTUAL
simple , OP_COMMA
identifier KW_VOID
simple , OP_COMMA
identifier KW_VOLATILE
simple , OP_COMMA
identifier KW_WCHAR_T
simple , OP_COMMA
identifier KW_WHILE
simple , OP_COMMA
identifier OP_LBRACE
simple , OP_COMMA
identifier OP_RBRACE
simple , OP_COMMA
identifier OP_LSQUARE
simple , OP_COMMA
identifier OP_RSQUARE
simple , OP_COMMA
identifier OP_LPAREN
simple , OP_COMMA
identifier OP_RPAREN
simple , OP_COMMA
identifier OP_BOR
simple , OP_COMMA
identifier OP_XOR
simple , OP_COMMA
identifier OP_COMPL
simple , OP_COMMA
identifier OP_AMP
simple , OP_COMMA
identifier OP_LNOT
simple , OP_COMMA
identifier OP_SEMICOLON
simple , OP_COMMA
identifier OP_COLON
simple , OP_COMMA
identifier OP_DOTS
simple , OP_COMMA
identifier OP_QMARK
simple , OP_COMMA
identifier OP_COLON2
simple , OP_COMMA
identifier OP_DOT
simple , OP_COMMA
identifier OP_DOTSTAR
simple , OP_COMMA
identifier OP_PLUS
simple , OP_COMMA
identifier OP_MINUS
simple , OP_COMMA
identifier OP_STAR
simple , OP_COMMA
identifier OP_DIV
simple , OP_COMMA
identifier OP_MOD
simple , OP_COMMA
identifier OP_ASS
simple , OP_COMMA
identifier OP_LT
simple , OP_COMMA
identifier OP_GT
simple , OP_COMMA
identifier OP_PLUSASS
simple , OP_COMMA
identifier OP_MINUSASS
simple , OP_COMMA
identifier OP_STARASS
simple , OP_COMMA
identifier OP_DIVASS
simple , OP_COMMA
identifier OP_MODASS
simple , OP_COMMA
identifier OP_XORASS
simple , OP_COMMA
identifier OP_BANDASS
simple , OP_COMMA
identifier OP_BORASS
simple , OP_COMMA
identifier OP_LSHIFT
simple , OP_COMMA
identifier OP_RSHIFT
simple , OP_COMMA
identifier OP_RSHIFTASS
simple , OP_COMMA
identifier OP_LSHIFTASS
simple , OP_COMMA
identifier OP_EQ
simple , OP_COMMA
identifier OP_NE
simple , OP_COMMA
identifier OP_LE
simple , OP_COMMA
identifier OP_GE
simple , OP_COMMA
identifier OP_LAND
simple , OP_COMMA
identifier OP_LOR
simple , OP_COMMA
identifier OP_INC
simple , OP_COMMA
identifier OP_DEC
simple , OP_COMMA
identifier OP_COMMA
simple , OP_COMMA
identifier OP_ARROWSTAR
simple , OP_COMMA
identifier OP_ARROW
simple , OP_COMMA
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple const KW_CONST
identifier unordered_map
simple < OP_LT
identifier string
simple , OP_COMMA
identifier ETokenType
simple > OP_GT
identifier StringToTokenTypeMap
simple = OP_ASS
simple { OP_LBRACE
simple { OP_LBRACE
literal "alignas" array of 8 char 616C69676E617300
simple , OP_COMMA
identifier KW_ALIGNAS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "alignof" array of 8 char 616C69676E6F6600
simple , OP_COMMA
identifier KW_ALIGNOF
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "asm" array of 4 char 61736D00
simple , OP_COMMA
identifier KW_ASM
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "auto" array of 5 char 6175746F00
simple , OP_COMMA
identifier KW_AUTO
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "bool" array of 5 char 626F6F6C00
simple , OP_COMMA
identifier KW_BOOL
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "break" array of 6 char 627265616B00
simple , OP_COMMA
identifier KW_BREAK
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "case" array of 5 char 6361736500
simple , OP_COMMA
identifier KW_CASE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "catch" array of 6 char 636174636800
simple , OP_COMMA
identifier KW_CATCH
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "char" array of 5 char 6368617200
simple , OP_COMMA
identifier KW_CHAR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "char16_t" array of 9 char 6368617231365F7400
simple , OP_COMMA
identifier KW_CHAR16_T
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "char32_t" array of 9 char 6368617233325F7400
simple , OP_COMMA
identifier KW_CHAR32_T
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "class" array of 6 char 636C61737300
simple , OP_COMMA
identifier KW_CLASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "const" array of 6 char 636F6E737400
simple , OP_COMMA
identifier KW_CONST
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "constexpr" array of 10 char 636F6E73746578707200
simple , OP_COMMA
identifier KW_CONSTEXPR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "const_cast" array of 11 char 636F6E73745F6361737400
simple , OP_COMMA
identifier KW_CONST_CAST
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "continue" array of 9 char 636F6E74696E756500
simple , OP_COMMA
identifier KW_CONTINUE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "decltype" array of 9 char 6465636C7479706500
simple , OP_COMMA
identifier KW_DECLTYPE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "default" array of 8 char 64656661756C7400
simple , OP_COMMA
identifier KW_DEFAULT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "delete" array of 7 char 64656C65746500
simple , OP_COMMA
identifier KW_DELETE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "do" array of 3 char 646F00
simple , OP_COMMA
identifier KW_DO
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "double" array of 7 char 646F75626C6500
simple , OP_COMMA
identifier KW_DOUBLE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "dynamic_cast" array of 13 char 64796E616D69635F6361737400
simple , OP_COMMA
identifier KW_DYNAMIC_CAST
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "else" array of 5 char 656C736500
simple , OP_COMMA
identifier KW_ELSE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "enum" array of 5 char 656E756D00
simple , OP_COMMA
identifier KW_ENUM
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "explicit" array of 9 char 6578706C6963697400
simple , OP_COMMA
identifier KW_EXPLICIT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "export" array of 7 char 6578706F727400
simple , OP_COMMA
identifier KW_EXPORT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "extern" array of 7 char 65787465726E00
simple , OP_COMMA
identifier KW_EXTERN
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "false" array of 6 char 66616C736500
simple , OP_COMMA
identifier KW_FALSE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "float" array of 6 char 666C6F617400
simple , OP_COMMA
identifier KW_FLOAT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "for" array of 4 char 666F7200
simple , OP_COMMA
identifier KW_FOR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "friend" array of 7 char 667269656E6400
simple , OP_COMMA
identifier KW_FRIEND
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "goto" array of 5 char 676F746F00
simple , OP_COMMA
identifier KW_GOTO
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "if" array of 3 char 696600
simple , OP_COMMA
identifier KW_IF
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "inline" array of 7 char 696E6C696E6500
simple , OP_COMMA
identifier KW_INLINE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "int" array of 4 char 696E7400
simple , OP_COMMA
identifier KW_INT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "long" array of 5 char 6C6F6E6700
simple , OP_COMMA
identifier KW_LONG
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "mutable" array of 8 char 6D757461626C6500
simple , OP_COMMA
identifier KW_MUTABLE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "namespace" array of 10 char 6E616D65737061636500
simple , OP_COMMA
identifier KW_NAMESPACE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "new" array of 4 char 6E657700
simple , OP_COMMA
identifier KW_NEW
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "noexcept" array of 9 char 6E6F65786365707400
simple , OP_COMMA
identifier KW_NOEXCEPT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "nullptr" array of 8 char 6E756C6C70747200
simple , OP_COMMA
identifier KW_NULLPTR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "operator" array of 9 char 6F70657261746F7200
simple , OP_COMMA
identifier KW_OPERATOR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "private" array of 8 char 7072697661746500
simple , OP_COMMA
identifier KW_PRIVATE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "protected" array of 10 char 70726F74656374656400
simple , OP_COMMA
identifier KW_PROTECTED
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "public" array of 7 char 7075626C696300
simple , OP_COMMA
identifier KW_PUBLIC
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "register" array of 9 char 726567697374657200
simple , OP_COMMA
identifier KW_REGISTER
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "reinterpret_cast" array of 17 char 7265696E746572707265745F6361737400
simple , OP_COMMA
identifier KW_REINTERPET_CAST
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "return" array of 7 char 72657475726E00
simple , OP_COMMA
identifier KW_RETURN
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "short" array of 6 char 73686F727400
simple , OP_COMMA
identifier KW_SHORT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "signed" array of 7 char 7369676E656400
simple , OP_COMMA
identifier KW_SIGNED
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "sizeof" array of 7 char 73697A656F6600
simple , OP_COMMA
identifier KW_SIZEOF
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "static" array of 7 char 73746174696300
simple , OP_COMMA
identifier KW_STATIC
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "static_assert" array of 14 char 7374617469635F61737365727400
simple , OP_COMMA
identifier KW_STATIC_ASSERT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "static_cast" array of 12 char 7374617469635F6361737400
simple , OP_COMMA
identifier KW_STATIC_CAST
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "struct" array of 7 char 73747275637400
simple , OP_COMMA
identifier KW_STRUCT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "switch" array of 7 char 73776974636800
simple , OP_COMMA
identifier KW_SWITCH
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "template" array of 9 char 74656D706C61746500
simple , OP_COMMA
identifier KW_TEMPLATE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "this" array of 5 char 7468697300
simple , OP_COMMA
identifier KW_THIS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "thread_local" array of 13 char 7468726561645F6C6F63616C00
simple , OP_COMMA
identifier KW_THREAD_LOCAL
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "throw" array of 6 char 7468726F7700
simple , OP_COMMA
identifier KW_THROW
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "true" array of 5 char 7472756500
simple , OP_COMMA
identifier KW_TRUE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "try" array of 4 char 74727900
simple , OP_COMMA
identifier KW_TRY
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "typedef" array of 8 char 7479706564656600
simple , OP_COMMA
identifier KW_TYPEDEF
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "typeid" array of 7 char 74797065696400
simple , OP_COMMA
identifier KW_TYPEID
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "typename" array of 9 char 747970656E616D6500
simple , OP_COMMA
identifier KW_TYPENAME
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "union" array of 6 char 756E696F6E00
simple , OP_COMMA
identifier KW_UNION
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "unsigned" array of 9 char 756E7369676E656400
simple , OP_COMMA
identifier KW_UNSIGNED
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "using" array of 6 char 7573696E6700
simple , OP_COMMA
identifier KW_USING
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "virtual" array of 8 char 7669727475616C00
simple , OP_COMMA
identifier KW_VIRTUAL
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "void" array of 5 char 766F696400
simple , OP_COMMA
identifier KW_VOID
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "volatile" array of 9 char 766F6C6174696C6500
simple , OP_COMMA
identifier KW_VOLATILE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "wchar_t" array of 8 char 77636861725F7400
simple , OP_COMMA
identifier KW_WCHAR_T
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "while" array of 6 char 7768696C6500
simple , OP_COMMA
identifier KW_WHILE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "{" array of 2 char 7B00
simple , OP_COMMA
identifier OP_LBRACE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "<%" array of 3 char 3C2500
simple , OP_COMMA
identifier OP_LBRACE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "}" array of 2 char 7D00
simple , OP_COMMA
identifier OP_RBRACE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "%>" array of 3 char 253E00
simple , OP_COMMA
identifier OP_RBRACE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "[" array of 2 char 5B00
simple , OP_COMMA
identifier OP_LSQUARE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "<:" array of 3 char 3C3A00
simple , OP_COMMA
identifier OP_LSQUARE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "]" array of 2 char 5D00
simple , OP_COMMA
identifier OP_RSQUARE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal ":>" array of 3 char 3A3E00
simple , OP_COMMA
identifier OP_RSQUARE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "(" array of 2 char 2800
simple , OP_COMMA
identifier OP_LPAREN
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal ")" array of 2 char 2900
simple , OP_COMMA
identifier OP_RPAREN
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "|" array of 2 char 7C00
simple , OP_COMMA
identifier OP_BOR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "bitor" array of 6 char 6269746F7200
simple , OP_COMMA
identifier OP_BOR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "^" array of 2 char 5E00
simple , OP_COMMA
identifier OP_XOR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "xor" array of 4 char 786F7200
simple , OP_COMMA
identifier OP_XOR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "~" array of 2 char 7E00
simple , OP_COMMA
identifier OP_COMPL
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "compl" array of 6 char 636F6D706C00
simple , OP_COMMA
identifier OP_COMPL
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "&" array of 2 char 2600
simple , OP_COMMA
identifier OP_AMP
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "bitand" array of 7 char 626974616E6400
simple , OP_COMMA
identifier OP_AMP
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "!" array of 2 char 2100
simple , OP_COMMA
identifier OP_LNOT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "not" array of 4 char 6E6F7400
simple , OP_COMMA
identifier OP_LNOT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal ";" array of 2 char 3B00
simple , OP_COMMA
identifier OP_SEMICOLON
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal ":" array of 2 char 3A00
simple , OP_COMMA
identifier OP_COLON
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "..." array of 4 char 2E2E2E00
simple , OP_COMMA
identifier OP_DOTS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "?" array of 2 char 3F00
simple , OP_COMMA
identifier OP_QMARK
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "::" array of 3 char 3A3A00
simple , OP_COMMA
identifier OP_COLON2
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "." array of 2 char 2E00
simple , OP_COMMA
identifier OP_DOT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal ".*" array of 3 char 2E2A00
simple , OP_COMMA
identifier OP_DOTSTAR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "+" array of 2 char 2B00
simple , OP_COMMA
identifier OP_PLUS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "-" array of 2 char 2D00
simple , OP_COMMA
identifier OP_MINUS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "*" array of 2 char 2A00
simple , OP_COMMA
identifier OP_STAR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "/" array of 2 char 2F00
simple , OP_COMMA
identifier OP_DIV
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "%" array of 2 char 2500
simple , OP_COMMA
identifier OP_MOD
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "=" array of 2 char 3D00
simple , OP_COMMA
identifier OP_ASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "<" array of 2 char 3C00
simple , OP_COMMA
identifier OP_LT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal ">" array of 2 char 3E00
simple , OP_COMMA
identifier OP_GT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "+=" array of 3 char 2B3D00
simple , OP_COMMA
identifier OP_PLUSASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "-=" array of 3 char 2D3D00
simple , OP_COMMA
identifier OP_MINUSASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "*=" array of 3 char 2A3D00
simple , OP_COMMA
identifier OP_STARASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "/=" array of 3 char 2F3D00
simple , OP_COMMA
identifier OP_DIVASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "%=" array of 3 char 253D00
simple , OP_COMMA
identifier OP_MODASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "^=" array of 3 char 5E3D00
simple , OP_COMMA
identifier OP_XORASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "xor_eq" array of 7 char 786F725F657100
simple , OP_COMMA
identifier OP_XORASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "&=" array of 3 char 263D00
simple , OP_COMMA
identifier OP_BANDASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "and_eq" array of 7 char 616E645F657100
simple , OP_COMMA
identifier OP_BANDASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "|=" array of 3 char 7C3D00
simple , OP_COMMA
identifier OP_BORASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "or_eq" array of 6 char 6F725F657100
simple , OP_COMMA
identifier OP_BORASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "<<" array of 3 char 3C3C00
simple , OP_COMMA
identifier OP_LSHIFT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal ">>" array of 3 char 3E3E00
simple , OP_COMMA
identifier OP_RSHIFT
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal ">>=" array of 4 char 3E3E3D00
simple , OP_COMMA
identifier OP_RSHIFTASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "<<=" array of 4 char 3C3C3D00
simple , OP_COMMA
identifier OP_LSHIFTASS
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "==" array of 3 char 3D3D00
simple , OP_COMMA
identifier OP_EQ
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "!=" array of 3 char 213D00
simple , OP_COMMA
identifier OP_NE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "not_eq" array of 7 char 6E6F745F657100
simple , OP_COMMA
identifier OP_NE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "<=" array of 3 char 3C3D00
simple , OP_COMMA
identifier OP_LE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal ">=" array of 3 char 3E3D00
simple , OP_COMMA
identifier OP_GE
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "&&" array of 3 char 262600
simple , OP_COMMA
identifier OP_LAND
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "and" array of 4 char 616E6400
simple , OP_COMMA
identifier OP_LAND
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "||" array of 3 char 7C7C00
simple , OP_COMMA
identifier OP_LOR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "or" array of 3 char 6F7200
simple , OP_COMMA
identifier OP_LOR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "++" array of 3 char 2B2B00
simple , OP_COMMA
identifier OP_INC
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "--" array of 3 char 2D2D00
simple , OP_COMMA
identifier OP_DEC
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "," array of 2 char 2C00
simple , OP_COMMA
identifier OP_COMMA
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "->*" array of 4 char 2D3E2A00
simple , OP_COMMA
identifier OP_ARROWSTAR
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
literal "->" array of 3 char 2D3E00
simple , OP_COMMA
identifier OP_ARROW
simple } OP_RBRACE
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple const KW_CONST
identifier map
simple < OP_LT
identifier ETokenType
simple , OP_COMMA
identifier string
simple > OP_GT
identifier TokenTypeToStringMap
simple = OP_ASS
simple { OP_LBRACE
simple { OP_LBRACE
identifier KW_ALIGNAS
simple , OP_COMMA
literal "KW_ALIGNAS" array of 11 char 4B575F414C49474E415300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_ALIGNOF
simple , OP_COMMA
literal "KW_ALIGNOF" array of 11 char 4B575F414C49474E4F4600
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_ASM
simple , OP_COMMA
literal "KW_ASM" array of 7 char 4B575F41534D00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_AUTO
simple , OP_COMMA
literal "KW_AUTO" array of 8 char 4B575F4155544F00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_BOOL
simple , OP_COMMA
literal "KW_BOOL" array of 8 char 4B575F424F4F4C00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_BREAK
simple , OP_COMMA
literal "KW_BREAK" array of 9 char 4B575F425245414B00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_CASE
simple , OP_COMMA
literal "KW_CASE" array of 8 char 4B575F4341534500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_CATCH
simple , OP_COMMA
literal "KW_CATCH" array of 9 char 4B575F434154434800
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_CHAR
simple , OP_COMMA
literal "KW_CHAR" array of 8 char 4B575F4348415200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_CHAR16_T
simple , OP_COMMA
literal "KW_CHAR16_T" array of 12 char 4B575F4348415231365F5400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_CHAR32_T
simple , OP_COMMA
literal "KW_CHAR32_T" array of 12 char 4B575F4348415233325F5400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_CLASS
simple , OP_COMMA
literal "KW_CLASS" array of 9 char 4B575F434C41535300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_CONST
simple , OP_COMMA
literal "KW_CONST" array of 9 char 4B575F434F4E535400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_CONSTEXPR
simple , OP_COMMA
literal "KW_CONSTEXPR" array of 13 char 4B575F434F4E53544558505200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_CONST_CAST
simple , OP_COMMA
literal "KW_CONST_CAST" array of 14 char 4B575F434F4E53545F4341535400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_CONTINUE
simple , OP_COMMA
literal "KW_CONTINUE" array of 12 char 4B575F434F4E54494E554500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_DECLTYPE
simple , OP_COMMA
literal "KW_DECLTYPE" array of 12 char 4B575F4445434C5459504500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_DEFAULT
simple , OP_COMMA
literal "KW_DEFAULT" array of 11 char 4B575F44454641554C5400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_DELETE
simple , OP_COMMA
literal "KW_DELETE" array of 10 char 4B575F44454C45544500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_DO
simple , OP_COMMA
literal "KW_DO" array of 6 char 4B575F444F00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_DOUBLE
simple , OP_COMMA
literal "KW_DOUBLE" array of 10 char 4B575F444F55424C4500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_DYNAMIC_CAST
simple , OP_COMMA
literal "KW_DYNAMIC_CAST" array of 16 char 4B575F44594E414D49435F4341535400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_ELSE
simple , OP_COMMA
literal "KW_ELSE" array of 8 char 4B575F454C534500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_ENUM
simple , OP_COMMA
literal "KW_ENUM" array of 8 char 4B575F454E554D00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_EXPLICIT
simple , OP_COMMA
literal "KW_EXPLICIT" array of 12 char 4B575F4558504C4943495400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_EXPORT
simple , OP_COMMA
literal "KW_EXPORT" array of 10 char 4B575F4558504F525400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_EXTERN
simple , OP_COMMA
literal "KW_EXTERN" array of 10 char 4B575F45585445524E00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_FALSE
simple , OP_COMMA
literal "KW_FALSE" array of 9 char 4B575F46414C534500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_FLOAT
simple , OP_COMMA
literal "KW_FLOAT" array of 9 char 4B575F464C4F415400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_FOR
simple , OP_COMMA
literal "KW_FOR" array of 7 char 4B575F464F5200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_FRIEND
simple , OP_COMMA
literal "KW_FRIEND" array of 10 char 4B575F465249454E4400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_GOTO
simple , OP_COMMA
literal "KW_GOTO" array of 8 char 4B575F474F544F00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_IF
simple , OP_COMMA
literal "KW_IF" array of 6 char 4B575F494600
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_INLINE
simple , OP_COMMA
literal "KW_INLINE" array of 10 char 4B575F494E4C494E4500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_INT
simple , OP_COMMA
literal "KW_INT" array of 7 char 4B575F494E5400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_LONG
simple , OP_COMMA
literal "KW_LONG" array of 8 char 4B575F4C4F4E4700
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_MUTABLE
simple , OP_COMMA
literal "KW_MUTABLE" array of 11 char 4B575F4D555441424C4500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_NAMESPACE
simple , OP_COMMA
literal "KW_NAMESPACE" array of 13 char 4B575F4E414D45535041434500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_NEW
simple , OP_COMMA
literal "KW_NEW" array of 7 char 4B575F4E455700
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_NOEXCEPT
simple , OP_COMMA
literal "KW_NOEXCEPT" array of 12 char 4B575F4E4F45584345505400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_NULLPTR
simple , OP_COMMA
literal "KW_NULLPTR" array of 11 char 4B575F4E554C4C50545200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_OPERATOR
simple , OP_COMMA
literal "KW_OPERATOR" array of 12 char 4B575F4F50455241544F5200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_PRIVATE
simple , OP_COMMA
literal "KW_PRIVATE" array of 11 char 4B575F5052495641544500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_PROTECTED
simple , OP_COMMA
literal "KW_PROTECTED" array of 13 char 4B575F50524F54454354454400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_PUBLIC
simple , OP_COMMA
literal "KW_PUBLIC" array of 10 char 4B575F5055424C494300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_REGISTER
simple , OP_COMMA
literal "KW_REGISTER" array of 12 char 4B575F524547495354455200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_REINTERPET_CAST
simple , OP_COMMA
literal "KW_REINTERPET_CAST" array of 19 char 4B575F5245494E5445525045545F4341535400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_RETURN
simple , OP_COMMA
literal "KW_RETURN" array of 10 char 4B575F52455455524E00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_SHORT
simple , OP_COMMA
literal "KW_SHORT" array of 9 char 4B575F53484F525400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_SIGNED
simple , OP_COMMA
literal "KW_SIGNED" array of 10 char 4B575F5349474E454400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_SIZEOF
simple , OP_COMMA
literal "KW_SIZEOF" array of 10 char 4B575F53495A454F4600
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_STATIC
simple , OP_COMMA
literal "KW_STATIC" array of 10 char 4B575F53544154494300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_STATIC_ASSERT
simple , OP_COMMA
literal "KW_STATIC_ASSERT" array of 17 char 4B575F5354415449435F41535345525400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_STATIC_CAST
simple , OP_COMMA
literal "KW_STATIC_CAST" array of 15 char 4B575F5354415449435F4341535400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_STRUCT
simple , OP_COMMA
literal "KW_STRUCT" array of 10 char 4B575F53545255435400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_SWITCH
simple , OP_COMMA
literal "KW_SWITCH" array of 10 char 4B575F53574954434800
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_TEMPLATE
simple , OP_COMMA
literal "KW_TEMPLATE" array of 12 char 4B575F54454D504C41544500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_THIS
simple , OP_COMMA
literal "KW_THIS" array of 8 char 4B575F5448495300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_THREAD_LOCAL
simple , OP_COMMA
literal "KW_THREAD_LOCAL" array of 16 char 4B575F5448524541445F4C4F43414C00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_THROW
simple , OP_COMMA
literal "KW_THROW" array of 9 char 4B575F5448524F5700
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_TRUE
simple , OP_COMMA
literal "KW_TRUE" array of 8 char 4B575F5452554500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_TRY
simple , OP_COMMA
literal "KW_TRY" array of 7 char 4B575F54525900
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_TYPEDEF
simple , OP_COMMA
literal "KW_TYPEDEF" array of 11 char 4B575F5459504544454600
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_TYPEID
simple , OP_COMMA
literal "KW_TYPEID" array of 10 char 4B575F54595045494400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_TYPENAME
simple , OP_COMMA
literal "KW_TYPENAME" array of 12 char 4B575F545950454E414D4500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_UNION
simple , OP_COMMA
literal "KW_UNION" array of 9 char 4B575F554E494F4E00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_UNSIGNED
simple , OP_COMMA
literal "KW_UNSIGNED" array of 12 char 4B575F554E5349474E454400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_USING
simple , OP_COMMA
literal "KW_USING" array of 9 char 4B575F5553494E4700
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_VIRTUAL
simple , OP_COMMA
literal "KW_VIRTUAL" array of 11 char 4B575F5649525455414C00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_VOID
simple , OP_COMMA
literal "KW_VOID" array of 8 char 4B575F564F494400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_VOLATILE
simple , OP_COMMA
literal "KW_VOLATILE" array of 12 char 4B575F564F4C4154494C4500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_WCHAR_T
simple , OP_COMMA
literal "KW_WCHAR_T" array of 11 char 4B575F57434841525F5400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier KW_WHILE
simple , OP_COMMA
literal "KW_WHILE" array of 9 char 4B575F5748494C4500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_LBRACE
simple , OP_COMMA
literal "OP_LBRACE" array of 10 char 4F505F4C425241434500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_RBRACE
simple , OP_COMMA
literal "OP_RBRACE" array of 10 char 4F505F52425241434500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_LSQUARE
simple , OP_COMMA
literal "OP_LSQUARE" array of 11 char 4F505F4C53515541524500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_RSQUARE
simple , OP_COMMA
literal "OP_RSQUARE" array of 11 char 4F505F5253515541524500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_LPAREN
simple , OP_COMMA
literal "OP_LPAREN" array of 10 char 4F505F4C504152454E00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_RPAREN
simple , OP_COMMA
literal "OP_RPAREN" array of 10 char 4F505F52504152454E00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_BOR
simple , OP_COMMA
literal "OP_BOR" array of 7 char 4F505F424F5200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_XOR
simple , OP_COMMA
literal "OP_XOR" array of 7 char 4F505F584F5200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_COMPL
simple , OP_COMMA
literal "OP_COMPL" array of 9 char 4F505F434F4D504C00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_AMP
simple , OP_COMMA
literal "OP_AMP" array of 7 char 4F505F414D5000
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_LNOT
simple , OP_COMMA
literal "OP_LNOT" array of 8 char 4F505F4C4E4F5400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_SEMICOLON
simple , OP_COMMA
literal "OP_SEMICOLON" array of 13 char 4F505F53454D49434F4C4F4E00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_COLON
simple , OP_COMMA
literal "OP_COLON" array of 9 char 4F505F434F4C4F4E00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_DOTS
simple , OP_COMMA
literal "OP_DOTS" array of 8 char 4F505F444F545300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_QMARK
simple , OP_COMMA
literal "OP_QMARK" array of 9 char 4F505F514D41524B00
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_COLON2
simple , OP_COMMA
literal "OP_COLON2" array of 10 char 4F505F434F4C4F4E3200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_DOT
simple , OP_COMMA
literal "OP_DOT" array of 7 char 4F505F444F5400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_DOTSTAR
simple , OP_COMMA
literal "OP_DOTSTAR" array of 11 char 4F505F444F545354415200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_PLUS
simple , OP_COMMA
literal "OP_PLUS" array of 8 char 4F505F504C555300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_MINUS
simple , OP_COMMA
literal "OP_MINUS" array of 9 char 4F505F4D494E555300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_STAR
simple , OP_COMMA
literal "OP_STAR" array of 8 char 4F505F5354415200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_DIV
simple , OP_COMMA
literal "OP_DIV" array of 7 char 4F505F44495600
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_MOD
simple , OP_COMMA
literal "OP_MOD" array of 7 char 4F505F4D4F4400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_ASS
simple , OP_COMMA
literal "OP_ASS" array of 7 char 4F505F41535300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_LT
simple , OP_COMMA
literal "OP_LT" array of 6 char 4F505F4C5400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_GT
simple , OP_COMMA
literal "OP_GT" array of 6 char 4F505F475400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_PLUSASS
simple , OP_COMMA
literal "OP_PLUSASS" array of 11 char 4F505F504C555341535300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_MINUSASS
simple , OP_COMMA
literal "OP_MINUSASS" array of 12 char 4F505F4D494E555341535300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_STARASS
simple , OP_COMMA
literal "OP_STARASS" array of 11 char 4F505F5354415241535300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_DIVASS
simple , OP_COMMA
literal "OP_DIVASS" array of 10 char 4F505F44495641535300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_MODASS
simple , OP_COMMA
literal "OP_MODASS" array of 10 char 4F505F4D4F4441535300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_XORASS
simple , OP_COMMA
literal "OP_XORASS" array of 10 char 4F505F584F5241535300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_BANDASS
simple , OP_COMMA
literal "OP_BANDASS" array of 11 char 4F505F42414E4441535300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_BORASS
simple , OP_COMMA
literal "OP_BORASS" array of 10 char 4F505F424F5241535300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_LSHIFT
simple , OP_COMMA
literal "OP_LSHIFT" array of 10 char 4F505F4C534849465400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_RSHIFT
simple , OP_COMMA
literal "OP_RSHIFT" array of 10 char 4F505F52534849465400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_RSHIFTASS
simple , OP_COMMA
literal "OP_RSHIFTASS" array of 13 char 4F505F52534849465441535300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_LSHIFTASS
simple , OP_COMMA
literal "OP_LSHIFTASS" array of 13 char 4F505F4C534849465441535300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_EQ
simple , OP_COMMA
literal "OP_EQ" array of 6 char 4F505F455100
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_NE
simple , OP_COMMA
literal "OP_NE" array of 6 char 4F505F4E4500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_LE
simple , OP_COMMA
literal "OP_LE" array of 6 char 4F505F4C4500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_GE
simple , OP_COMMA
literal "OP_GE" array of 6 char 4F505F474500
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_LAND
simple , OP_COMMA
literal "OP_LAND" array of 8 char 4F505F4C414E4400
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_LOR
simple , OP_COMMA
literal "OP_LOR" array of 7 char 4F505F4C4F5200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_INC
simple , OP_COMMA
literal "OP_INC" array of 7 char 4F505F494E4300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_DEC
simple , OP_COMMA
literal "OP_DEC" array of 7 char 4F505F44454300
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_COMMA
simple , OP_COMMA
literal "OP_COMMA" array of 9 char 4F505F434F4D4D4100
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_ARROWSTAR
simple , OP_COMMA
literal "OP_ARROWSTAR" array of 13 char 4F505F4152524F575354415200
simple } OP_RBRACE
simple , OP_COMMA
simple { OP_LBRACE
identifier OP_ARROW
simple , OP_COMMA
literal "OP_ARROW" array of 9 char 4F505F4152524F5700
simple } OP_RBRACE
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple char KW_CHAR
identifier ValueToHexChar
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple switch KW_SWITCH
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple case KW_CASE
literal 0 int 00000000
simple : OP_COLON
simple return KW_RETURN
literal '0' char 30
simple ; OP_SEMICOLON
simple case KW_CASE
literal 1 int 01000000
simple : OP_COLON
simple return KW_RETURN
literal '1' char 31
simple ; OP_SEMICOLON
simple case KW_CASE
literal 2 int 02000000
simple : OP_COLON
simple return KW_RETURN
literal '2' char 32
simple ; OP_SEMICOLON
simple case KW_CASE
literal 3 int 03000000
simple : OP_COLON
simple return KW_RETURN
literal '3' char 33
simple ; OP_SEMICOLON
simple case KW_CASE
literal 4 int 04000000
simple : OP_COLON
simple return KW_RETURN
literal '4' char 34
simple ; OP_SEMICOLON
simple case KW_CASE
literal 5 int 05000000
simple : OP_COLON
simple return KW_RETURN
literal '5' char 35
simple ; OP_SEMICOLON
simple case KW_CASE
literal 6 int 06000000
simple : OP_COLON
simple return KW_RETURN
literal '6' char 36
simple ; OP_SEMICOLON
simple case KW_CASE
literal 7 int 07000000
simple : OP_COLON
simple return KW_RETURN
literal '7' char 37
simple ; OP_SEMICOLON
simple case KW_CASE
literal 8 int 08000000
simple : OP_COLON
simple return KW_RETURN
literal '8' char 38
simple ; OP_SEMICOLON
simple case KW_CASE
literal 9 int 09000000
simple : OP_COLON
simple return KW_RETURN
literal '9' char 39
simple ; OP_SEMICOLON
simple case KW_CASE
literal 10 int 0A000000
simple : OP_COLON
simple return KW_RETURN
literal 'A' char 41
simple ; OP_SEMICOLON
simple case KW_CASE
literal 11 int 0B000000
simple : OP_COLON
simple return KW_RETURN
literal 'B' char 42
simple ; OP_SEMICOLON
simple case KW_CASE
literal 12 int 0C000000
simple : OP_COLON
simple return KW_RETURN
literal 'C' char 43
simple ; OP_SEMICOLON
simple case KW_CASE
literal 13 int 0D000000
simple : OP_COLON
simple return KW_RETURN
literal 'D' char 44
simple ; OP_SEMICOLON
simple case KW_CASE
literal 14 int 0E000000
simple : OP_COLON
simple return KW_RETURN
literal 'E' char 45
simple ; OP_SEMICOLON
simple case KW_CASE
literal 15 int 0F000000
simple : OP_COLON
simple return KW_RETURN
literal 'F' char 46
simple ; OP_SEMICOLON
simple default KW_DEFAULT
simple : OP_COLON
simple throw KW_THROW
identifier logic_error
simple ( OP_LPAREN
literal "ValueToHexChar of nonhex value" array of 31 char 56616C7565546F48657843686172206F66206E6F6E6865782076616C756500
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
identifier string
identifier HexDump
simple ( OP_LPAREN
simple const KW_CONST
simple void KW_VOID
simple * OP_STAR
identifier pdata
simple , OP_COMMA
identifier size_t
identifier nbytes
simple ) OP_RPAREN
simple { OP_LBRACE
simple unsigned KW_UNSIGNED
simple char KW_CHAR
simple * OP_STAR
identifier p
simple = OP_ASS
simple ( OP_LPAREN
simple unsigned KW_UNSIGNED
simple char KW_CHAR
simple * OP_STAR
simple ) OP_RPAREN
identifier pdata
simple ; OP_SEMICOLON
identifier string
identifier s
simple ( OP_LPAREN
identifier nbytes
simple * OP_STAR
literal 2 int 02000000
simple , OP_COMMA
literal '?' char 3F
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
identifier size_t
identifier i
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier nbytes
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
identifier s
simple [ OP_LSQUARE
literal 2 int 02000000
simple * OP_STAR
identifier i
simple + OP_PLUS
literal 0 int 00000000
simple ] OP_RSQUARE
simple = OP_ASS
identifier ValueToHexChar
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier p
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0xF0 int F0000000
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 4 int 04000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier s
simple [ OP_LSQUARE
literal 2 int 02000000
simple * OP_STAR
identifier i
simple + OP_PLUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple = OP_ASS
identifier ValueToHexChar
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier p
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple & OP_AMP
literal 0x0F int 0F000000
simple ) OP_RPAREN
simple >> OP_RSHIFT
literal 0 int 00000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple return KW_RETURN
identifier s
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple struct KW_STRUCT
identifier DebugPostTokenOutputStream
simple { OP_LBRACE
simple void KW_VOID
identifier emit_invalid
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier source
simple ) OP_RPAREN
simple { OP_LBRACE
identifier cout
simple << OP_LSHIFT
literal "invalid " array of 9 char 696E76616C69642000
simple << OP_LSHIFT
identifier source
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_simple
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier source
simple , OP_COMMA
identifier ETokenType
identifier token_type
simple ) OP_RPAREN
simple { OP_LBRACE
identifier cout
simple << OP_LSHIFT
literal "simple " array of 8 char 73696D706C652000
simple << OP_LSHIFT
identifier source
simple << OP_LSHIFT
literal " " array of 2 char 2000
simple << OP_LSHIFT
identifier TokenTypeToStringMap
simple . OP_DOT
identifier at
simple ( OP_LPAREN
identifier token_type
simple ) OP_RPAREN
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_identifier
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier source
simple ) OP_RPAREN
simple { OP_LBRACE
identifier cout
simple << OP_LSHIFT
literal "identifier " array of 12 char 6964656E7469666965722000
simple << OP_LSHIFT
identifier source
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_literal
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier source
simple , OP_COMMA
identifier EFundamentalType
identifier type
simple , OP_COMMA
simple const KW_CONST
simple void KW_VOID
simple * OP_STAR
identifier data
simple , OP_COMMA
identifier size_t
identifier nbytes
simple ) OP_RPAREN
simple { OP_LBRACE
identifier cout
simple << OP_LSHIFT
literal "literal " array of 9 char 6C69746572616C2000
simple << OP_LSHIFT
identifier source
simple << OP_LSHIFT
literal " " array of 2 char 2000
simple << OP_LSHIFT
identifier FundamentalTypeToStringMap
simple . OP_DOT
identifier at
simple ( OP_LPAREN
identifier type
simple ) OP_RPAREN
simple << OP_LSHIFT
literal " " array of 2 char 2000
simple << OP_LSHIFT
identifier HexDump
simple ( OP_LPAREN
identifier data
simple , OP_COMMA
identifier nbytes
simple ) OP_RPAREN
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_literal_array
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier source
simple , OP_COMMA
identifier size_t
identifier num_elements
simple , OP_COMMA
identifier EFundamentalType
identifier type
simple , OP_COMMA
simple const KW_CONST
simple void KW_VOID
simple * OP_STAR
identifier data
simple , OP_COMMA
identifier size_t
identifier nbytes
simple ) OP_RPAREN
simple { OP_LBRACE
identifier cout
simple << OP_LSHIFT
literal "literal " array of 9 char 6C69746572616C2000
simple << OP_LSHIFT
identifier source
simple << OP_LSHIFT
literal " array of " array of 11 char 206172726179206F662000
simple << OP_LSHIFT
identifier num_elements
simple << OP_LSHIFT
literal " " array of 2 char 2000
simple << OP_LSHIFT
identifier FundamentalTypeToStringMap
simple . OP_DOT
identifier at
simple ( OP_LPAREN
identifier type
simple ) OP_RPAREN
simple << OP_LSHIFT
literal " " array of 2 char 2000
simple << OP_LSHIFT
identifier HexDump
simple ( OP_LPAREN
identifier data
simple , OP_COMMA
identifier nbytes
simple ) OP_RPAREN
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_user_defined_literal_character
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier source
simple , OP_COMMA
simple const KW_CONST
identifier string
simple & OP_AMP
identifier ud_suffix
simple , OP_COMMA
identifier EFundamentalType
identifier type
simple , OP_COMMA
simple const KW_CONST
simple void KW_VOID
simple * OP_STAR
identifier data
simple , OP_COMMA
identifier size_t
identifier nbytes
simple ) OP_RPAREN
simple { OP_LBRACE
identifier cout
simple << OP_LSHIFT
literal "user-defined-literal " array of 22 char 757365722D646566696E65642D6C69746572616C2000
simple << OP_LSHIFT
identifier source
simple << OP_LSHIFT
literal " " array of 2 char 2000
simple << OP_LSHIFT
identifier ud_suffix
simple << OP_LSHIFT
literal " character " array of 12 char 206368617261637465722000
simple << OP_LSHIFT
identifier FundamentalTypeToStringMap
simple . OP_DOT
identifier at
simple ( OP_LPAREN
identifier type
simple ) OP_RPAREN
simple << OP_LSHIFT
literal " " array of 2 char 2000
simple << OP_LSHIFT
identifier HexDump
simple ( OP_LPAREN
identifier data
simple , OP_COMMA
identifier nbytes
simple ) OP_RPAREN
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_user_defined_literal_string_array
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier source
simple , OP_COMMA
simple const KW_CONST
identifier string
simple & OP_AMP
identifier ud_suffix
simple , OP_COMMA
identifier size_t
identifier num_elements
simple , OP_COMMA
identifier EFundamentalType
identifier type
simple , OP_COMMA
simple const KW_CONST
simple void KW_VOID
simple * OP_STAR
identifier data
simple , OP_COMMA
identifier size_t
identifier nbytes
simple ) OP_RPAREN
simple { OP_LBRACE
identifier cout
simple << OP_LSHIFT
literal "user-defined-literal " array of 22 char 757365722D646566696E65642D6C69746572616C2000
simple << OP_LSHIFT
identifier source
simple << OP_LSHIFT
literal " " array of 2 char 2000
simple << OP_LSHIFT
identifier ud_suffix
simple << OP_LSHIFT
literal " string array of " array of 18 char 20737472696E67206172726179206F662000
simple << OP_LSHIFT
identifier num_elements
simple << OP_LSHIFT
literal " " array of 2 char 2000
simple << OP_LSHIFT
identifier FundamentalTypeToStringMap
simple . OP_DOT
identifier at
simple ( OP_LPAREN
identifier type
simple ) OP_RPAREN
simple << OP_LSHIFT
literal " " array of 2 char 2000
simple << OP_LSHIFT
identifier HexDump
simple ( OP_LPAREN
identifier data
simple , OP_COMMA
identifier nbytes
simple ) OP_RPAREN
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_user_defined_literal_integer
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier source
simple , OP_COMMA
simple const KW_CONST
identifier string
simple & OP_AMP
identifier ud_suffix
simple , OP_COMMA
simple const KW_CONST
identifier string
simple & OP_AMP
identifier prefix
simple ) OP_RPAREN
simple { OP_LBRACE
identifier cout
simple << OP_LSHIFT
literal "user-defined-literal " array of 22 char 757365722D646566696E65642D6C69746572616C2000
simple << OP_LSHIFT
identifier source
simple << OP_LSHIFT
literal " " array of 2 char 2000
simple << OP_LSHIFT
identifier ud_suffix
simple << OP_LSHIFT
literal " integer " array of 10 char 20696E74656765722000
simple << OP_LSHIFT
identifier prefix
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_user_defined_literal_floating
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier source
simple , OP_COMMA
simple const KW_CONST
identifier string
simple & OP_AMP
identifier ud_suffix
simple , OP_COMMA
simple const KW_CONST
identifier string
simple & OP_AMP
identifier prefix
simple ) OP_RPAREN
simple { OP_LBRACE
identifier cout
simple << OP_LSHIFT
literal "user-defined-literal " array of 22 char 757365722D646566696E65642D6C69746572616C2000
simple << OP_LSHIFT
identifier source
simple << OP_LSHIFT
literal " " array of 2 char 2000
simple << OP_LSHIFT
identifier ud_suffix
simple << OP_LSHIFT
literal " floating " array of 11 char 20666C6F6174696E672000
simple << OP_LSHIFT
identifier prefix
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_eof
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier cout
simple << OP_LSHIFT
literal "eof" array of 4 char 656F6600
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple float KW_FLOAT
identifier PA2Decode_float
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier s
simple ) OP_RPAREN
simple { OP_LBRACE
identifier istringstream
identifier iss
simple ( OP_LPAREN
identifier s
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple float KW_FLOAT
identifier x
simple ; OP_SEMICOLON
identifier iss
simple >> OP_RSHIFT
identifier x
simple ; OP_SEMICOLON
simple return KW_RETURN
identifier x
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple double KW_DOUBLE
identifier PA2Decode_double
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier s
simple ) OP_RPAREN
simple { OP_LBRACE
identifier istringstream
identifier iss
simple ( OP_LPAREN
identifier s
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple double KW_DOUBLE
identifier x
simple ; OP_SEMICOLON
identifier iss
simple >> OP_RSHIFT
identifier x
simple ; OP_SEMICOLON
simple return KW_RETURN
identifier x
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple long KW_LONG
simple double KW_DOUBLE
identifier PA2Decode_long_double
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier s
simple ) OP_RPAREN
simple { OP_LBRACE
identifier istringstream
identifier iss
simple ( OP_LPAREN
identifier s
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple long KW_LONG
simple double KW_DOUBLE
identifier x
simple ; OP_SEMICOLON
identifier iss
simple >> OP_RSHIFT
identifier x
simple ; OP_SEMICOLON
simple return KW_RETURN
identifier x
simple ; OP_SEMICOLON
simple } OP_RBRACE
identifier EFundamentalType
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier string
identifier ppnumber
simple , OP_COMMA
simple bool KW_BOOL
identifier isunsigned
simple ) OP_RPAREN
simple { OP_LBRACE
identifier string
identifier num16
simple = OP_ASS
literal "0" array of 2 char 3000
simple ; OP_SEMICOLON
simple int KW_INT
identifier w
simple = OP_ASS
literal 10 int 0A000000
simple , OP_COMMA
identifier start
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
literal 0 int 00000000
simple ] OP_RSQUARE
simple == OP_EQ
literal '0' char 30
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
literal 1 int 01000000
simple ] OP_RSQUARE
simple == OP_EQ
literal 'x' char 78
simple || OP_LOR
identifier ppnumber
simple [ OP_LSQUARE
literal 1 int 01000000
simple ] OP_RSQUARE
simple == OP_EQ
literal 'X' char 58
simple ) OP_RPAREN
simple { OP_LBRACE
identifier start
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier w
simple = OP_ASS
literal 16 int 10000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier start
simple = OP_ASS
literal 1 int 01000000
simple ; OP_SEMICOLON
identifier w
simple = OP_ASS
literal 8 int 08000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple int KW_INT
identifier nbytes
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier w
simple == OP_EQ
literal 16 int 10000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier num16
simple = OP_ASS
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 2 int 02000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier reverse
simple ( OP_LPAREN
identifier num16
simple . OP_DOT
identifier begin
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
identifier num16
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple int KW_INT
identifier pos
simple = OP_ASS
identifier num16
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple , OP_COMMA
identifier zeros
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple while KW_WHILE
simple ( OP_LPAREN
identifier num16
simple [ OP_LSQUARE
identifier pos
simple ] OP_RSQUARE
simple == OP_EQ
literal 0 int 00000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier pos
simple -- OP_DEC
simple ; OP_SEMICOLON
identifier zeros
simple ++ OP_INC
simple ; OP_SEMICOLON
simple } OP_RBRACE
identifier num16
simple = OP_ASS
identifier num16
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier num16
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
identifier zeros
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier i
simple = OP_ASS
identifier start
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple int KW_INT
identifier c
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier j
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier j
simple < OP_LT
identifier num16
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier j
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple int KW_INT
identifier curr
simple = OP_ASS
identifier HexCharToValue
simple ( OP_LPAREN
identifier num16
simple [ OP_LSQUARE
identifier j
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier num16
simple [ OP_LSQUARE
identifier j
simple ] OP_RSQUARE
simple = OP_ASS
identifier ValueToHexChar
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier curr
simple * OP_STAR
identifier w
simple + OP_PLUS
identifier c
simple ) OP_RPAREN
simple % OP_MOD
literal 16 int 10000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier c
simple = OP_ASS
simple ( OP_LPAREN
identifier curr
simple * OP_STAR
identifier w
simple + OP_PLUS
identifier c
simple ) OP_RPAREN
simple / OP_DIV
literal 16 int 10000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple > OP_GT
literal 0 int 00000000
simple ) OP_RPAREN
identifier num16
simple += OP_PLUSASS
identifier ValueToHexChar
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier c
simple = OP_ASS
identifier ppnumber
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple - OP_MINUS
literal '0' char 30
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier j
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier j
simple < OP_LT
identifier num16
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier j
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple int KW_INT
identifier curr
simple = OP_ASS
identifier HexCharToValue
simple ( OP_LPAREN
identifier num16
simple [ OP_LSQUARE
identifier j
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier num16
simple [ OP_LSQUARE
identifier j
simple ] OP_RSQUARE
simple = OP_ASS
identifier ValueToHexChar
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier curr
simple + OP_PLUS
identifier c
simple ) OP_RPAREN
simple % OP_MOD
literal 16 int 10000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier c
simple = OP_ASS
simple ( OP_LPAREN
identifier curr
simple + OP_PLUS
identifier c
simple ) OP_RPAREN
simple / OP_DIV
literal 16 int 10000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple > OP_GT
literal 0 int 00000000
simple ) OP_RPAREN
identifier num16
simple += OP_PLUSASS
identifier ValueToHexChar
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
identifier nbytes
simple = OP_ASS
simple ( OP_LPAREN
identifier num16
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple + OP_PLUS
literal 1 int 01000000
simple ) OP_RPAREN
simple / OP_DIV
literal 2 int 02000000
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier nbytes
simple <= OP_LE
literal 4 int 04000000
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier nbytes
simple == OP_EQ
literal 4 int 04000000
simple && OP_LAND
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier HexCharToValue
simple ( OP_LPAREN
identifier num16
simple [ OP_LSQUARE
identifier num16
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple & OP_AMP
literal 0x8 int 08000000
simple ) OP_RPAREN
simple == OP_EQ
literal 0x8 int 08000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier w
simple == OP_EQ
literal 10 int 0A000000
simple && OP_LAND
identifier isunsigned
simple == OP_EQ
simple false KW_FALSE
simple ) OP_RPAREN
simple return KW_RETURN
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple return KW_RETURN
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier isunsigned
simple == OP_EQ
simple false KW_FALSE
simple ) OP_RPAREN
simple return KW_RETURN
identifier FundamentalTypeOf
simple < OP_LT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple return KW_RETURN
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier nbytes
simple <= OP_LE
literal 8 int 08000000
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier nbytes
simple == OP_EQ
literal 8 int 08000000
simple && OP_LAND
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier HexCharToValue
simple ( OP_LPAREN
identifier num16
simple [ OP_LSQUARE
identifier num16
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple & OP_AMP
literal 0x8 int 08000000
simple ) OP_RPAREN
simple == OP_EQ
literal 0x8 int 08000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier w
simple == OP_EQ
literal 10 int 0A000000
simple && OP_LAND
identifier isunsigned
simple == OP_EQ
simple false KW_FALSE
simple ) OP_RPAREN
simple return KW_RETURN
identifier FT_INVALID
simple ; OP_SEMICOLON
simple else KW_ELSE
simple return KW_RETURN
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier isunsigned
simple == OP_EQ
simple false KW_FALSE
simple ) OP_RPAREN
simple return KW_RETURN
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple return KW_RETURN
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple return KW_RETURN
identifier FT_INVALID
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple struct KW_STRUCT
identifier IPPTokenStream
simple { OP_LBRACE
identifier vector
simple < OP_LT
identifier string
simple > OP_GT
identifier string_literals
simple ; OP_SEMICOLON
identifier DebugPostTokenOutputStream
identifier output
simple ; OP_SEMICOLON
simple bool KW_BOOL
identifier differentiate_string
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier data
simple , OP_COMMA
identifier EFundamentalType
simple & OP_AMP
identifier type
simple , OP_COMMA
identifier string
simple & OP_AMP
identifier idata
simple , OP_COMMA
identifier string
simple & OP_AMP
identifier udsuffix
simple ) OP_RPAREN
simple { OP_LBRACE
simple int KW_INT
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple bool KW_BOOL
identifier invalid
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
identifier idata
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
simple int KW_INT
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier uint
identifier pos
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier type
simple = OP_ASS
identifier FT_DEFAULT
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier i
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier data
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple char KW_CHAR
identifier c
simple = OP_ASS
identifier data
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ; OP_SEMICOLON
simple switch KW_SWITCH
simple ( OP_LPAREN
identifier state
simple ) OP_RPAREN
simple { OP_LBRACE
simple case KW_CASE
literal 0 int 00000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier type
simple = OP_ASS
identifier FundamentalTypeOf
simple < OP_LT
simple char32_t KW_CHAR32_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier type
simple = OP_ASS
identifier FundamentalTypeOf
simple < OP_LT
simple wchar_t KW_WCHAR_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'u' char 75
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 1 int 01000000
simple ; OP_SEMICOLON
identifier type
simple = OP_ASS
identifier FundamentalTypeOf
simple < OP_LT
simple char16_t KW_CHAR16_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'R' char 52
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 12 int 0C000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier cerr
simple << OP_LSHIFT
literal "Is that possible" array of 17 char 4973207468617420706F737369626C6500
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 1 int 01000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '8' char 38
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier type
simple = OP_ASS
identifier FundamentalTypeOf
simple < OP_LT
simple char KW_CHAR
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'R' char 52
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 12 int 0C000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier cerr
simple << OP_LSHIFT
literal "Is that possible" array of 17 char 4973207468617420706F737369626C6500
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 2 int 02000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'R' char 52
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 12 int 0C000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier cerr
simple << OP_LSHIFT
literal "Is that possible" array of 17 char 4973207468617420706F737369626C6500
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 3 int 03000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\\' char 5C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple { OP_LBRACE
identifier idata
simple += OP_PLUSASS
identifier c
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 4 int 04000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '_' char 5F
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 11 int 0B000000
simple ; OP_SEMICOLON
identifier pos
simple = OP_ASS
identifier i
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier invalid
simple = OP_ASS
simple true KW_TRUE
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 5 int 05000000
simple : OP_COLON
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\\' char 5C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier idata
simple += OP_PLUSASS
literal '\\' char 5C
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier idata
simple += OP_PLUSASS
literal '\"' char 22
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '?' char 3F
simple ) OP_RPAREN
simple { OP_LBRACE
identifier idata
simple += OP_PLUSASS
literal '?' char 3F
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
simple { OP_LBRACE
identifier idata
simple += OP_PLUSASS
literal '\'' char 27
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'a' char 61
simple ) OP_RPAREN
simple { OP_LBRACE
identifier idata
simple += OP_PLUSASS
literal '\a' char 07
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'b' char 62
simple ) OP_RPAREN
simple { OP_LBRACE
identifier idata
simple += OP_PLUSASS
literal '\b' char 08
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'f' char 66
simple ) OP_RPAREN
simple { OP_LBRACE
identifier idata
simple += OP_PLUSASS
literal '\f' char 0C
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'n' char 6E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier idata
simple += OP_PLUSASS
literal '\n' char 0A
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'r' char 72
simple ) OP_RPAREN
simple { OP_LBRACE
identifier idata
simple += OP_PLUSASS
literal '\r' char 0D
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 't' char 74
simple ) OP_RPAREN
simple { OP_LBRACE
identifier idata
simple += OP_PLUSASS
literal '\t' char 09
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'v' char 76
simple ) OP_RPAREN
simple { OP_LBRACE
identifier idata
simple += OP_PLUSASS
literal '\v' char 0B
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Octal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Octal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 6 int 06000000
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
identifier c
simple - OP_MINUS
literal '0' char 30
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'x' char 78
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 9 int 09000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier cerr
simple << OP_LSHIFT
literal "is that possible?" array of 18 char 6973207468617420706F737369626C653F00
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 6 int 06000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier escape
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Octal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Octal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 7 int 07000000
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
identifier escape
simple * OP_STAR
literal 8 int 08000000
simple + OP_PLUS
identifier c
simple - OP_MINUS
literal '0' char 30
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\\' char 5C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier escape
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier escape
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier c
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 7 int 07000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier escape
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Octal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Octal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 8 int 08000000
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
identifier escape
simple * OP_STAR
literal 8 int 08000000
simple + OP_PLUS
identifier c
simple - OP_MINUS
literal '0' char 30
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\\' char 5C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier escape
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier escape
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier c
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 8 int 08000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier escape
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\\' char 5C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier escape
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier escape
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier c
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 9 int 09000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 10 int 0A000000
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
identifier HexCharToValue
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier cerr
simple << OP_LSHIFT
literal "is that possible?" array of 18 char 6973207468617420706F737369626C653F00
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 10 int 0A000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier escape
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\\' char 5C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier escape
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 10 int 0A000000
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 16 int 10000000
simple * OP_STAR
identifier escape
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier escape
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier escape
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier idata
simple += OP_PLUSASS
identifier c
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 11 int 0B000000
simple : OP_COLON
identifier pos
simple = OP_ASS
identifier i
simple < OP_LT
identifier pos
simple ? OP_QMARK
identifier i
simple : OP_COLON
identifier pos
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 12 int 0C000000
simple : OP_COLON
identifier pos
simple = OP_ASS
identifier i
simple ; OP_SEMICOLON
identifier i
simple = OP_ASS
identifier data
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple + OP_PLUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 11 int 0B000000
simple ) OP_RPAREN
identifier udsuffix
simple = OP_ASS
identifier data
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
identifier pos
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 12 int 0C000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier uint
identifier istart
simple = OP_ASS
identifier pos
simple , OP_COMMA
identifier iend
simple = OP_ASS
identifier data
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple , OP_COMMA
identifier iud
simple = OP_ASS
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
simple ; OP_SEMICOLON
identifier data
simple [ OP_LSQUARE
identifier iend
simple ] OP_RSQUARE
simple != OP_NE
literal '\"' char 22
simple ; OP_SEMICOLON
identifier iend
simple -- OP_DEC
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier iud
simple = OP_ASS
identifier iend
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
simple int KW_INT
identifier i
simple = OP_ASS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier data
simple [ OP_LSQUARE
identifier istart
simple + OP_PLUS
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal '(' char 28
simple && OP_LAND
identifier data
simple [ OP_LSQUARE
identifier iend
simple - OP_MINUS
identifier i
simple ] OP_RSQUARE
simple == OP_EQ
literal ')' char 29
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier data
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
identifier istart
simple + OP_PLUS
literal 1 int 01000000
simple , OP_COMMA
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
simple == OP_EQ
identifier data
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
identifier iend
simple - OP_MINUS
identifier i
simple + OP_PLUS
literal 1 int 01000000
simple , OP_COMMA
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier istart
simple = OP_ASS
identifier istart
simple + OP_PLUS
identifier i
simple ; OP_SEMICOLON
identifier iend
simple = OP_ASS
identifier iend
simple - OP_MINUS
identifier i
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple } OP_RBRACE
identifier idata
simple = OP_ASS
identifier data
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
identifier istart
simple + OP_PLUS
literal 1 int 01000000
simple , OP_COMMA
identifier iend
simple - OP_MINUS
identifier istart
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier iud
simple == OP_EQ
identifier data
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
identifier udsuffix
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier udsuffix
simple = OP_ASS
identifier data
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
identifier iud
simple + OP_PLUS
literal 1 int 01000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier udsuffix
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
simple return KW_RETURN
identifier invalid
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier clear_string_literals
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier string
identifier total
simple , OP_COMMA
identifier totaldata
simple ; OP_SEMICOLON
identifier string
identifier udsuffix
simple ; OP_SEMICOLON
simple int KW_INT
identifier num_elements
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple bool KW_BOOL
identifier invalid
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier FT_DEFAULT
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier i
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier string_literals
simple . OP_DOT
identifier size
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier currtype
simple ; OP_SEMICOLON
identifier string
identifier idata
simple , OP_COMMA
identifier currsuffix
simple ; OP_SEMICOLON
identifier invalid
simple |= OP_BORASS
identifier differentiate_string
simple ( OP_LPAREN
identifier string_literals
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple , OP_COMMA
identifier currtype
simple , OP_COMMA
identifier idata
simple , OP_COMMA
identifier currsuffix
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier udsuffix
simple == OP_EQ
literal "" array of 1 char 00
simple ) OP_RPAREN
identifier udsuffix
simple = OP_ASS
identifier currsuffix
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier currsuffix
simple != OP_NE
literal "" array of 1 char 00
simple && OP_LAND
identifier udsuffix
simple != OP_NE
identifier currsuffix
simple ) OP_RPAREN
identifier invalid
simple = OP_ASS
simple true KW_TRUE
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FT_DEFAULT
simple ) OP_RPAREN
identifier type
simple = OP_ASS
identifier currtype
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier currtype
simple != OP_NE
identifier FT_DEFAULT
simple && OP_LAND
identifier type
simple != OP_NE
identifier currtype
simple ) OP_RPAREN
identifier invalid
simple = OP_ASS
simple true KW_TRUE
simple ; OP_SEMICOLON
identifier total
simple += OP_PLUSASS
identifier string_literals
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier i
simple != OP_NE
identifier string_literals
simple . OP_DOT
identifier size
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
identifier total
simple += OP_PLUSASS
literal " " array of 2 char 2000
simple ; OP_SEMICOLON
identifier totaldata
simple += OP_PLUSASS
identifier idata
simple ; OP_SEMICOLON
simple } OP_RBRACE
identifier totaldata
simple += OP_PLUSASS
literal '\0' char 00
simple ; OP_SEMICOLON
identifier string_literals
simple . OP_DOT
identifier clear
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple int KW_INT
identifier nbytes
simple = OP_ASS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier invalid
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier total
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple char16_t KW_CHAR16_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier vector
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier Unicode
simple = OP_ASS
identifier strUtf82Unicode
simple ( OP_LPAREN
identifier totaldata
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier nbytes
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier totaldata
simple = OP_ASS
identifier strUnicode2Utf16
simple ( OP_LPAREN
identifier Unicode
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple char32_t KW_CHAR32_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple wchar_t KW_WCHAR_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier vector
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier Unicode
simple = OP_ASS
identifier strUtf82Unicode
simple ( OP_LPAREN
identifier totaldata
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier nbytes
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
identifier totaldata
simple = OP_ASS
identifier strUnicode2Utf32
simple ( OP_LPAREN
identifier Unicode
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier type
simple = OP_ASS
identifier FundamentalTypeOf
simple < OP_LT
simple char KW_CHAR
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier num_elements
simple = OP_ASS
identifier totaldata
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple / OP_DIV
identifier nbytes
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier udsuffix
simple == OP_EQ
literal "" array of 1 char 00
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_literal_array
simple ( OP_LPAREN
identifier total
simple , OP_COMMA
identifier num_elements
simple , OP_COMMA
identifier type
simple , OP_COMMA
identifier totaldata
simple . OP_DOT
identifier data
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
identifier totaldata
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_user_defined_literal_string_array
simple ( OP_LPAREN
identifier total
simple , OP_COMMA
identifier udsuffix
simple , OP_COMMA
identifier num_elements
simple , OP_COMMA
identifier type
simple , OP_COMMA
identifier totaldata
simple . OP_DOT
identifier data
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
identifier totaldata
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple } OP_RBRACE
simple void KW_VOID
identifier emit_whitespace_sequence
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple } OP_RBRACE
simple void KW_VOID
identifier emit_new_line
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple } OP_RBRACE
simple void KW_VOID
identifier emit_header_name
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier data
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
simple ! OP_LNOT
identifier string_literals
simple . OP_DOT
identifier empty
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier clear_string_literals
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_identifier
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier data
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
simple ! OP_LNOT
identifier string_literals
simple . OP_DOT
identifier empty
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier clear_string_literals
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier StringToTokenTypeMap
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple != OP_NE
identifier StringToTokenTypeMap
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_simple
simple ( OP_LPAREN
identifier data
simple , OP_COMMA
identifier StringToTokenTypeMap
simple . OP_DOT
identifier at
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_identifier
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple void KW_VOID
identifier emit_pp_number
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier ppnumber
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
simple ! OP_LNOT
identifier string_literals
simple . OP_DOT
identifier empty
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier clear_string_literals
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple int KW_INT
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple int KW_INT
identifier ERROR
simple = OP_ASS
literal 22 int 16000000
simple ; OP_SEMICOLON
simple long KW_LONG
identifier value
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier string
identifier udsuffix
simple = OP_ASS
literal "_" array of 2 char 5F00
simple ; OP_SEMICOLON
simple char KW_CHAR
identifier c
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier i
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
identifier c
simple = OP_ASS
identifier ppnumber
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ; OP_SEMICOLON
simple switch KW_SWITCH
simple ( OP_LPAREN
identifier state
simple ) OP_RPAREN
simple { OP_LBRACE
simple case KW_CASE
literal 0 int 00000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple <= OP_LE
literal '9' char 39
simple && OP_LAND
identifier c
simple >= OP_GE
literal '1' char 31
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 1 int 01000000
simple ; OP_SEMICOLON
identifier value
simple = OP_ASS
identifier c
simple - OP_MINUS
literal '0' char 30
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '0' char 30
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 7 int 07000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '.' char 2E
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 15 int 0F000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 1 int 01000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 1 int 01000000
simple ; OP_SEMICOLON
identifier value
simple = OP_ASS
identifier value
simple * OP_STAR
literal 10 int 0A000000
simple + OP_PLUS
identifier c
simple - OP_MINUS
literal '0' char 30
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'u' char 75
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'l' char 6C
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '_' char 5F
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 14 int 0E000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '.' char 2E
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 15 int 0F000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'e' char 65
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'E' char 45
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 16 int 10000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 2 int 02000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'l' char 6C
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 3 int 03000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'l' char 6C
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 4 int 04000000
simple : OP_COLON
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 5 int 05000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'u' char 75
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'l' char 6C
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 6 int 06000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 6 int 06000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'u' char 75
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 7 int 07000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Octal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Octal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 7 int 07000000
simple ; OP_SEMICOLON
identifier value
simple = OP_ASS
identifier value
simple * OP_STAR
literal 8 int 08000000
simple + OP_PLUS
identifier c
simple - OP_MINUS
literal '0' char 30
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'u' char 75
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 8 int 08000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'l' char 6C
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 12 int 0C000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'x' char 78
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'X' char 58
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 23 int 17000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '_' char 5F
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 14 int 0E000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '.' char 2E
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 15 int 0F000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'e' char 65
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'E' char 45
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 16 int 10000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 8 int 08000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'l' char 6C
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 9 int 09000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 9 int 09000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'l' char 6C
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 10 int 0A000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 10 int 0A000000
simple : OP_COLON
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 11 int 0B000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 11 int 0B000000
simple ; OP_SEMICOLON
identifier value
simple = OP_ASS
identifier value
simple * OP_STAR
literal 16 int 10000000
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'u' char 75
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 8 int 08000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'l' char 6C
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 12 int 0C000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '_' char 5F
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 14 int 0E000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 12 int 0C000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'u' char 75
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 9 int 09000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'l' char 6C
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 13 int 0D000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 13 int 0D000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'u' char 75
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 10 int 0A000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 14 int 0E000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple || OP_LOR
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 14 int 0E000000
simple ; OP_SEMICOLON
identifier udsuffix
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 15 int 0F000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 15 int 0F000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'e' char 65
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'E' char 45
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 16 int 10000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'l' char 6C
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 19 int 13000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'f' char 66
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'F' char 46
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 20 int 14000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '_' char 5F
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 21 int 15000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 16 int 10000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '+' char 2B
simple || OP_LOR
identifier c
simple == OP_EQ
literal '-' char 2D
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 18 int 12000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 17 int 11000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 17 int 11000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '_' char 5F
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 21 int 15000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 17 int 11000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'f' char 66
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'F' char 46
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 20 int 14000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 18 int 12000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 17 int 11000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 19 int 13000000
simple : OP_COLON
simple case KW_CASE
literal 20 int 14000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '_' char 5F
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 21 int 15000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 21 int 15000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple || OP_LOR
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 21 int 15000000
simple ; OP_SEMICOLON
identifier udsuffix
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 23 int 17000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 11 int 0B000000
simple ; OP_SEMICOLON
identifier value
simple = OP_ASS
identifier value
simple * OP_STAR
literal 16 int 10000000
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier state
simple = OP_ASS
identifier ERROR
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 1 int 01000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
simple false KW_FALSE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 4 int 04000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 2 int 02000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
simple , OP_COMMA
simple true KW_TRUE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 4 int 04000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 3 int 03000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ) OP_RPAREN
simple , OP_COMMA
simple true KW_TRUE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 4 int 04000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 3 int 03000000
simple ) OP_RPAREN
simple , OP_COMMA
simple true KW_TRUE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple == OP_EQ
literal 'u' char 75
simple || OP_LOR
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple != OP_NE
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 3 int 03000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple { OP_LBRACE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple == OP_EQ
literal 'u' char 75
simple || OP_LOR
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
simple { OP_LBRACE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple != OP_NE
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple { OP_LBRACE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple != OP_NE
identifier FT_INVALID
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 5 int 05000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
simple , OP_COMMA
simple false KW_FALSE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 6 int 06000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ) OP_RPAREN
simple , OP_COMMA
simple false KW_FALSE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple != OP_NE
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple != OP_NE
identifier FT_INVALID
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 7 int 07000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
simple false KW_FALSE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier type
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 4 int 04000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier type
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 8 int 08000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
simple , OP_COMMA
simple true KW_TRUE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 4 int 04000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 9 int 09000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ) OP_RPAREN
simple , OP_COMMA
simple true KW_TRUE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 10 int 0A000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 3 int 03000000
simple ) OP_RPAREN
simple , OP_COMMA
simple true KW_TRUE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple == OP_EQ
literal 'u' char 75
simple || OP_LOR
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple != OP_NE
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 3 int 03000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple { OP_LBRACE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple == OP_EQ
literal 'u' char 75
simple || OP_LOR
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
simple { OP_LBRACE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple != OP_NE
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
simple { OP_LBRACE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple != OP_NE
identifier FT_INVALID
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 11 int 0B000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
simple false KW_FALSE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier type
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 4 int 04000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier type
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 12 int 0C000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
simple , OP_COMMA
simple false KW_FALSE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier type
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 13 int 0D000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier EFundamentalType
identifier type
simple = OP_ASS
identifier GetTypeOfInteger
simple ( OP_LPAREN
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ) OP_RPAREN
simple , OP_COMMA
simple false KW_FALSE
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ] OP_RSQUARE
simple != OP_NE
identifier ppnumber
simple [ OP_LSQUARE
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
literal 2 int 02000000
simple ] OP_RSQUARE
simple ) OP_RPAREN
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple unsigned KW_UNSIGNED
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple != OP_NE
identifier FT_INVALID
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple long KW_LONG
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier value
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 14 int 0E000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_user_defined_literal_integer
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier udsuffix
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
identifier udsuffix
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 15 int 0F000000
simple || OP_LOR
identifier state
simple == OP_EQ
literal 17 int 11000000
simple ) OP_RPAREN
simple { OP_LBRACE
simple double KW_DOUBLE
identifier dvalue
simple = OP_ASS
identifier PA2Decode_double
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple double KW_DOUBLE
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier dvalue
simple , OP_COMMA
literal 8 int 08000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 19 int 13000000
simple ) OP_RPAREN
simple { OP_LBRACE
simple long KW_LONG
simple double KW_DOUBLE
identifier dvalue
simple = OP_ASS
identifier PA2Decode_long_double
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple long KW_LONG
simple double KW_DOUBLE
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier dvalue
simple , OP_COMMA
literal 16 int 10000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 20 int 14000000
simple ) OP_RPAREN
simple { OP_LBRACE
simple float KW_FLOAT
identifier dvalue
simple = OP_ASS
identifier PA2Decode_float
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier FundamentalTypeOf
simple < OP_LT
simple float KW_FLOAT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple , OP_COMMA
simple & OP_AMP
identifier dvalue
simple , OP_COMMA
literal 4 int 04000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier state
simple == OP_EQ
literal 21 int 15000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_user_defined_literal_floating
simple ( OP_LPAREN
identifier ppnumber
simple , OP_COMMA
identifier udsuffix
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
literal 0 int 00000000
simple , OP_COMMA
identifier ppnumber
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple - OP_MINUS
identifier udsuffix
simple . OP_DOT
identifier length
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier ppnumber
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple int KW_INT
identifier differentiate_character
simple ( OP_LPAREN
identifier vector
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier data
simple , OP_COMMA
identifier EFundamentalType
simple & OP_AMP
identifier type
simple , OP_COMMA
simple int KW_INT
simple & OP_AMP
identifier idata
simple , OP_COMMA
identifier size_t
simple & OP_AMP
identifier nbytes
simple ) OP_RPAREN
simple { OP_LBRACE
identifier type
simple = OP_ASS
identifier FundamentalTypeOf
simple < OP_LT
simple char KW_CHAR
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple int KW_INT
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier uint
identifier pos
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier idata
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier i
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier data
simple . OP_DOT
identifier size
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple int KW_INT
identifier c
simple = OP_ASS
identifier data
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ; OP_SEMICOLON
simple switch KW_SWITCH
simple ( OP_LPAREN
identifier state
simple ) OP_RPAREN
simple { OP_LBRACE
simple case KW_CASE
literal 0 int 00000000
simple : OP_COLON
identifier state
simple = OP_ASS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'U' char 55
simple ) OP_RPAREN
identifier type
simple = OP_ASS
identifier FundamentalTypeOf
simple < OP_LT
simple char32_t KW_CHAR32_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'u' char 75
simple ) OP_RPAREN
identifier type
simple = OP_ASS
identifier FundamentalTypeOf
simple < OP_LT
simple char16_t KW_CHAR16_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
identifier type
simple = OP_ASS
identifier FundamentalTypeOf
simple < OP_LT
simple wchar_t KW_WCHAR_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 1 int 01000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 2 int 02000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\\' char 5C
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier idata
simple = OP_ASS
simple ( OP_LPAREN
simple int KW_INT
simple ) OP_RPAREN
identifier c
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 3 int 03000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 4 int 04000000
simple : OP_COLON
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\\' char 5C
simple ) OP_RPAREN
identifier idata
simple = OP_ASS
literal '\\' char 5C
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
identifier idata
simple = OP_ASS
literal '\"' char 22
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '?' char 3F
simple ) OP_RPAREN
identifier idata
simple = OP_ASS
literal '?' char 3F
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
identifier idata
simple = OP_ASS
literal '\'' char 27
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'a' char 61
simple ) OP_RPAREN
identifier idata
simple = OP_ASS
literal '\a' char 07
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'b' char 62
simple ) OP_RPAREN
identifier idata
simple = OP_ASS
literal '\b' char 08
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'f' char 66
simple ) OP_RPAREN
identifier idata
simple = OP_ASS
literal '\f' char 0C
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'n' char 6E
simple ) OP_RPAREN
identifier idata
simple = OP_ASS
literal '\n' char 0A
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'r' char 72
simple ) OP_RPAREN
identifier idata
simple = OP_ASS
literal '\r' char 0D
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 't' char 74
simple ) OP_RPAREN
identifier idata
simple = OP_ASS
literal '\t' char 09
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'v' char 76
simple ) OP_RPAREN
identifier idata
simple = OP_ASS
literal '\v' char 0B
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Octal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Octal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 6 int 06000000
simple ; OP_SEMICOLON
identifier idata
simple = OP_ASS
identifier c
simple - OP_MINUS
literal '0' char 30
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'x' char 78
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 9 int 09000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 5 int 05000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '_' char 5F
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 11 int 0B000000
simple ; OP_SEMICOLON
identifier pos
simple = OP_ASS
identifier i
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 6 int 06000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Octal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Octal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 7 int 07000000
simple ; OP_SEMICOLON
identifier idata
simple = OP_ASS
identifier idata
simple * OP_STAR
literal 8 int 08000000
simple + OP_PLUS
identifier c
simple - OP_MINUS
literal '0' char 30
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 7 int 07000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Octal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Octal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 8 int 08000000
simple ; OP_SEMICOLON
identifier idata
simple = OP_ASS
identifier idata
simple * OP_STAR
literal 8 int 08000000
simple + OP_PLUS
identifier c
simple - OP_MINUS
literal '0' char 30
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 8 int 08000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 9 int 09000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 10 int 0A000000
simple ; OP_SEMICOLON
identifier idata
simple = OP_ASS
identifier HexCharToValue
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 10 int 0A000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 10 int 0A000000
simple ; OP_SEMICOLON
identifier idata
simple = OP_ASS
literal 16 int 10000000
simple * OP_STAR
identifier idata
simple + OP_PLUS
identifier HexCharToValue
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 11 int 0B000000
simple : OP_COLON
identifier pos
simple = OP_ASS
identifier i
simple < OP_LT
identifier pos
simple ? OP_QMARK
identifier i
simple : OP_COLON
identifier pos
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
identifier nbytes
simple = OP_ASS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple char16_t KW_CHAR16_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier nbytes
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier idata
simple > OP_GT
literal 0xffff int FFFF0000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier type
simple = OP_ASS
identifier FT_INVALID
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple char32_t KW_CHAR32_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier nbytes
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FundamentalTypeOf
simple < OP_LT
simple wchar_t KW_WCHAR_T
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier nbytes
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier idata
simple > OP_GT
literal 127 int 7F000000
simple ) OP_RPAREN
simple { OP_LBRACE
identifier type
simple = OP_ASS
identifier FundamentalTypeOf
simple < OP_LT
simple int KW_INT
simple > OP_GT
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier nbytes
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple return KW_RETURN
identifier pos
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple void KW_VOID
identifier emit_character_literal
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier data
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
simple ! OP_LNOT
identifier string_literals
simple . OP_DOT
identifier empty
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier clear_string_literals
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier vector
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier unidata
simple = OP_ASS
identifier strUtf82Unicode
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier EFundamentalType
identifier type
simple ; OP_SEMICOLON
simple int KW_INT
identifier idata
simple ; OP_SEMICOLON
identifier size_t
identifier nbytes
simple ; OP_SEMICOLON
identifier differentiate_character
simple ( OP_LPAREN
identifier unidata
simple , OP_COMMA
identifier type
simple , OP_COMMA
identifier idata
simple , OP_COMMA
identifier nbytes
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FT_INVALID
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_literal
simple ( OP_LPAREN
identifier data
simple , OP_COMMA
identifier type
simple , OP_COMMA
simple & OP_AMP
identifier idata
simple , OP_COMMA
identifier nbytes
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_user_defined_character_literal
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier data
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
simple ! OP_LNOT
identifier string_literals
simple . OP_DOT
identifier empty
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier clear_string_literals
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier vector
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier unidata
simple = OP_ASS
identifier strUtf82Unicode
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier EFundamentalType
identifier type
simple ; OP_SEMICOLON
simple int KW_INT
identifier idata
simple ; OP_SEMICOLON
identifier size_t
identifier nbytes
simple ; OP_SEMICOLON
simple int KW_INT
identifier pos
simple = OP_ASS
identifier differentiate_character
simple ( OP_LPAREN
identifier unidata
simple , OP_COMMA
identifier type
simple , OP_COMMA
identifier idata
simple , OP_COMMA
identifier nbytes
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier type
simple == OP_EQ
identifier FT_INVALID
simple ) OP_RPAREN
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
identifier output
simple . OP_DOT
identifier emit_user_defined_literal_character
simple ( OP_LPAREN
identifier data
simple , OP_COMMA
identifier data
simple . OP_DOT
identifier substr
simple ( OP_LPAREN
identifier pos
simple ) OP_RPAREN
simple , OP_COMMA
identifier type
simple , OP_COMMA
simple & OP_AMP
identifier idata
simple , OP_COMMA
identifier nbytes
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_string_literal
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier data
simple ) OP_RPAREN
simple { OP_LBRACE
identifier string_literals
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_user_defined_string_literal
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier data
simple ) OP_RPAREN
simple { OP_LBRACE
identifier string_literals
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier data
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
simple ! OP_LNOT
identifier string_literals
simple . OP_DOT
identifier empty
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier clear_string_literals
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier data
simple == OP_EQ
literal "#" array of 2 char 2300
simple || OP_LOR
identifier data
simple == OP_EQ
literal "##" array of 3 char 232300
simple || OP_LOR
identifier data
simple == OP_EQ
literal "%:" array of 3 char 253A00
simple || OP_LOR
identifier data
simple == OP_EQ
literal "%:%:" array of 5 char 253A253A00
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier StringToTokenTypeMap
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple != OP_NE
identifier StringToTokenTypeMap
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_simple
simple ( OP_LPAREN
identifier data
simple , OP_COMMA
identifier StringToTokenTypeMap
simple . OP_DOT
identifier at
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple void KW_VOID
identifier emit_non_whitespace_char
simple ( OP_LPAREN
simple const KW_CONST
identifier string
simple & OP_AMP
identifier data
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
simple ! OP_LNOT
identifier string_literals
simple . OP_DOT
identifier empty
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier clear_string_literals
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_invalid
simple ( OP_LPAREN
identifier data
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple void KW_VOID
identifier emit_eof
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
simple ! OP_LNOT
identifier string_literals
simple . OP_DOT
identifier empty
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
identifier clear_string_literals
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_eof
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple ~ OP_COMPL
identifier IPPTokenStream
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple } OP_RBRACE
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple struct KW_STRUCT
identifier PPTokenizer
simple { OP_LBRACE
identifier IPPTokenStream
simple & OP_AMP
identifier output
simple ; OP_SEMICOLON
identifier PPTokenizer
simple ( OP_LPAREN
identifier IPPTokenStream
simple & OP_AMP
identifier output
simple ) OP_RPAREN
simple : OP_COLON
identifier output
simple ( OP_LPAREN
identifier output
simple ) OP_RPAREN
simple { OP_LBRACE
simple } OP_RBRACE
simple bool KW_BOOL
identifier process
simple ( OP_LPAREN
simple int KW_INT
identifier c
simple ) OP_RPAREN
simple { OP_LBRACE
simple static KW_STATIC
simple int KW_INT
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple static KW_STATIC
identifier string
identifier result
simple ; OP_SEMICOLON
simple static KW_STATIC
simple bool KW_BOOL
identifier header
simple = OP_ASS
simple false KW_FALSE
simple , OP_COMMA
identifier headerstart
simple = OP_ASS
simple true KW_TRUE
simple ; OP_SEMICOLON
simple static KW_STATIC
simple int KW_INT
identifier escapefrom
simple = OP_ASS
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple switch KW_SWITCH
simple ( OP_LPAREN
identifier state
simple ) OP_RPAREN
simple { OP_LBRACE
simple case KW_CASE
literal 0 int 00000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ' ' char 20
simple || OP_LOR
identifier c
simple == OP_EQ
literal '\t' char 09
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple && OP_LAND
simple ! OP_LNOT
identifier Is_Initial_Banned
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple && OP_LAND
identifier c
simple != OP_NE
literal 'u' char 75
simple && OP_LAND
identifier c
simple != OP_NE
literal 'U' char 55
simple && OP_LAND
identifier c
simple != OP_NE
literal 'L' char 4C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '.' char 2E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 5 int 05000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 7 int 07000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'U' char 55
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'L' char 4C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 10 int 0A000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'u' char 75
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 11 int 0B000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 13 int 0D000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Is_RawStringPointer
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 16 int 10000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
identifier GetRawString
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '{' char 7B
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "{" array of 2 char 7B00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '}' char 7D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "}" array of 2 char 7D00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '[' char 5B
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "[" array of 2 char 5B00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ']' char 5D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "]" array of 2 char 5D00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '(' char 28
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "(" array of 2 char 2800
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ')' char 29
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal ")" array of 2 char 2900
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ';' char 3B
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal ";" array of 2 char 3B00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '?' char 3F
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "?" array of 2 char 3F00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '~' char 7E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "~" array of 2 char 7E00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ',' char 2C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "," array of 2 char 2C00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\n' char 0A
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_new_line
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple true KW_TRUE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '#' char 23
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 17 int 11000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '<' char 3C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 18 int 12000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ':' char 3A
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 22 int 16000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '%' char 25
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 23 int 17000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '+' char 2B
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 26 int 1A000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '-' char 2D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 27 int 1B000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '=' char 3D
simple || OP_LOR
identifier c
simple == OP_EQ
literal '!' char 21
simple || OP_LOR
identifier c
simple == OP_EQ
literal '*' char 2A
simple || OP_LOR
identifier c
simple == OP_EQ
literal '/' char 2F
simple || OP_LOR
identifier c
simple == OP_EQ
literal '^' char 5E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 29 int 1D000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '&' char 26
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 30 int 1E000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '|' char 7C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 31 int 1F000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '>' char 3E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 32 int 20000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
identifier EndOfFile
simple ) OP_RPAREN
simple break KW_BREAK
simple ; OP_SEMICOLON
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
identifier PartialComment
simple ) OP_RPAREN
simple throw KW_THROW
identifier logic_error
simple ( OP_LPAREN
literal "partial comment" array of 16 char 7061727469616C20636F6D6D656E7400
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple else KW_ELSE
simple { OP_LBRACE
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_non_whitespace_char
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 1 int 01000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ' ' char 20
simple || OP_LOR
identifier c
simple == OP_EQ
literal 0x0d int 0D000000
simple || OP_LOR
identifier c
simple == OP_EQ
literal '\t' char 09
simple ) OP_RPAREN
identifier state
simple = OP_ASS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_whitespace_sequence
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 2 int 02000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple || OP_LOR
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier Digraph_IdentifierLike_Operators
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple != OP_NE
identifier Digraph_IdentifierLike_Operators
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_identifier
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier result
simple == OP_EQ
literal "include" array of 8 char 696E636C75646500
simple ) OP_RPAREN
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier header
simple == OP_EQ
simple true KW_TRUE
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 40 int 28000000
simple ; OP_SEMICOLON
identifier header
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier header
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 3 int 03000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
simple ( OP_LPAREN
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple || OP_LOR
identifier c
simple == OP_EQ
literal '.' char 2E
simple ) OP_RPAREN
simple && OP_LAND
identifier c
simple != OP_NE
literal 'e' char 65
simple && OP_LAND
identifier c
simple != OP_NE
literal 'E' char 45
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'e' char 65
simple || OP_LOR
identifier c
simple == OP_EQ
literal 'E' char 45
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 4 int 04000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_pp_number
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 4 int 04000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple || OP_LOR
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple || OP_LOR
identifier c
simple == OP_EQ
literal '.' char 2E
simple || OP_LOR
identifier c
simple == OP_EQ
literal '+' char 2B
simple || OP_LOR
identifier c
simple == OP_EQ
literal '-' char 2D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_pp_number
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 5 int 05000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '.' char 2E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 6 int 06000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '*' char 2A
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 6 int 06000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '.' char 2E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
literal '.' char 2E
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 3 int 03000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "." array of 2 char 2E00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "." array of 2 char 2E00
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "." array of 2 char 2E00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "." array of 2 char 2E00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 7 int 07000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_cchar
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 7 int 07000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\\' char 5C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 34 int 22000000
simple ; OP_SEMICOLON
identifier escapefrom
simple = OP_ASS
literal 7 int 07000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
literal '\\' char 5C
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 8 int 08000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
literal '\'' char 27
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple throw KW_THROW
identifier logic_error
simple ( OP_LPAREN
literal "state 7:unterminated character literal" array of 39 char 737461746520373A756E7465726D696E6174656420636861726163746572206C69746572616C00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 8 int 08000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple && OP_LAND
simple ! OP_LNOT
identifier Is_Initial_Banned
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 9 int 09000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_character_literal
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 9 int 09000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple || OP_LOR
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 9 int 09000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_user_defined_character_literal
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 10 int 0A000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 7 int 07000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 13 int 0D000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Is_RawStringPointer
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 16 int 10000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier GetRawString
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple || OP_LOR
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_identifier
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 11 int 0B000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\'' char 27
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 7 int 07000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 13 int 0D000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Is_RawStringPointer
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 16 int 10000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier GetRawString
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '8' char 38
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 12 int 0C000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple || OP_LOR
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_identifier
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 12 int 0C000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 13 int 0D000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Is_RawStringPointer
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 16 int 10000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier GetRawString
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple || OP_LOR
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 2 int 02000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_identifier
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 13 int 0D000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_schar
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 13 int 0D000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\\' char 5C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 34 int 22000000
simple ; OP_SEMICOLON
identifier escapefrom
simple = OP_ASS
literal 13 int 0D000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 14 int 0E000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple throw KW_THROW
identifier logic_error
simple ( OP_LPAREN
literal "state 13:unterminated string literal" array of 37 char 73746174652031333A756E7465726D696E6174656420737472696E67206C69746572616C00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 14 int 0E000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple && OP_LAND
simple ! OP_LNOT
identifier Is_Initial_Banned
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 15 int 0F000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_string_literal
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 15 int 0F000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple || OP_LOR
identifier Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 15 int 0F000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_user_defined_string_literal
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 16 int 10000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_identifier_nondigit
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 15 int 0F000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
identifier Unicode2Utf8
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_string_literal
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 17 int 11000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '#' char 23
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "##" array of 3 char 232300
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier headerstart
simple == OP_EQ
simple true KW_TRUE
simple ) OP_RPAREN
identifier header
simple = OP_ASS
simple true KW_TRUE
simple ; OP_SEMICOLON
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "#" array of 2 char 2300
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 18 int 12000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '<' char 3C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 19 int 13000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ':' char 3A
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 20 int 14000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '%' char 25
simple || OP_LOR
identifier c
simple == OP_EQ
literal '=' char 3D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "<" array of 2 char 3C00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 19 int 13000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '=' char 3D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "<<=" array of 4 char 3C3C3D00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "<<" array of 3 char 3C3C00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 20 int 14000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ':' char 3A
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 21 int 15000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "<:" array of 3 char 3C3A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 21 int 15000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '>' char 3E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "<:" array of 3 char 3C3A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal ":>" array of 3 char 3A3E00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ':' char 3A
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "<:" array of 3 char 3C3A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "::" array of 3 char 3A3A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "<" array of 2 char 3C00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "::" array of 3 char 3A3A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 22 int 16000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ':' char 3A
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "::" array of 3 char 3A3A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '>' char 3E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal ":>" array of 3 char 3A3E00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal ":" array of 2 char 3A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 23 int 17000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ':' char 3A
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 24 int 18000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '>' char 3E
simple || OP_LOR
identifier c
simple == OP_EQ
literal '=' char 3D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "%" array of 2 char 2500
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 24 int 18000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '%' char 25
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 25 int 19000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "%:" array of 3 char 253A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier headerstart
simple == OP_EQ
simple true KW_TRUE
simple ) OP_RPAREN
identifier header
simple = OP_ASS
simple true KW_TRUE
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 25 int 19000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ':' char 3A
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "%:%:" array of 5 char 253A253A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "%:" array of 3 char 253A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "%" array of 2 char 2500
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 26 int 1A000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '+' char 2B
simple || OP_LOR
identifier c
simple == OP_EQ
literal '=' char 3D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "+" array of 2 char 2B00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 27 int 1B000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '-' char 2D
simple || OP_LOR
identifier c
simple == OP_EQ
literal '=' char 3D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '>' char 3E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 28 int 1C000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "-" array of 2 char 2D00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 28 int 1C000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '*' char 2A
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "->*" array of 4 char 2D3E2A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "->" array of 3 char 2D3E00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 29 int 1D000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '=' char 3D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 30 int 1E000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '=' char 3D
simple || OP_LOR
identifier c
simple == OP_EQ
literal '&' char 26
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "&" array of 2 char 2600
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 31 int 1F000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '=' char 3D
simple || OP_LOR
identifier c
simple == OP_EQ
literal '|' char 7C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal "|" array of 2 char 7C00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 32 int 20000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '>' char 3E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 33 int 21000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '=' char 3D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal ">=" array of 3 char 3E3D00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal ">" array of 2 char 3E00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 33 int 21000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '=' char 3D
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal ">>=" array of 4 char 3E3E3D00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_preprocessing_op_or_punc
simple ( OP_LPAREN
literal ">>" array of 3 char 3E3E00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 34 int 22000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier SimpleEscapeSequence_CodePoints
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier SimpleEscapeSequence_CodePoints
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier state
simple = OP_ASS
identifier escapefrom
simple ; OP_SEMICOLON
identifier escapefrom
simple = OP_ASS
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier Octal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Octal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 35 int 23000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal 'x' char 78
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 38 int 26000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple throw KW_THROW
identifier logic_error
simple ( OP_LPAREN
literal "invalid escape sequence\n" array of 25 char 696E76616C6964206573636170652073657175656E63650A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 35 int 23000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Octal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Octal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 36 int 24000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
identifier escapefrom
simple ; OP_SEMICOLON
identifier escapefrom
simple = OP_ASS
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 36 int 24000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Octal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Octal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
identifier escapefrom
simple ; OP_SEMICOLON
identifier escapefrom
simple = OP_ASS
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
identifier escapefrom
simple ; OP_SEMICOLON
identifier escapefrom
simple = OP_ASS
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 38 int 26000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 39 int 27000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple throw KW_THROW
identifier logic_error
simple ( OP_LPAREN
literal "invalid escape sequence\n" array of 25 char 696E76616C6964206573636170652073657175656E63650A00
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 39 int 27000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Hexadecimal_Digit
simple . OP_DOT
identifier find
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple != OP_NE
identifier Hexadecimal_Digit
simple . OP_DOT
identifier end
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 39 int 27000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
identifier escapefrom
simple ; OP_SEMICOLON
identifier escapefrom
simple = OP_ASS
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 40 int 28000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ' ' char 20
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 41 int 29000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '<' char 3C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 42 int 2A000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 43 int 2B000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 41 int 29000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal ' ' char 20
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 41 int 29000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '<' char 3C
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 42 int 2A000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_whitespace_sequence
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 43 int 2B000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_whitespace_sequence
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_whitespace_sequence
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 42 int 2A000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_hchar
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 42 int 2A000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '>' char 3E
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_header_name
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple case KW_CASE
literal 43 int 2B000000
simple : OP_COLON
simple if KW_IF
simple ( OP_LPAREN
identifier Is_qchar
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 43 int 2B000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
literal '\"' char 22
simple ) OP_RPAREN
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier result
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
identifier c
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier output
simple . OP_DOT
identifier emit_header_name
simple ( OP_LPAREN
identifier result
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier result
simple = OP_ASS
literal "" array of 1 char 00
simple ; OP_SEMICOLON
identifier headerstart
simple = OP_ASS
simple false KW_FALSE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple else KW_ELSE
simple { OP_LBRACE
identifier state
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
simple return KW_RETURN
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple break KW_BREAK
simple ; OP_SEMICOLON
simple default KW_DEFAULT
simple : OP_COLON
simple throw KW_THROW
identifier logic_error
simple ( OP_LPAREN
literal "Big DFA failed, what the fuck!" array of 31 char 42696720444641206661696C65642C207768617420746865206675636B2100
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple if KW_IF
simple ( OP_LPAREN
identifier c
simple == OP_EQ
identifier EndOfFile
simple ) OP_RPAREN
simple { OP_LBRACE
identifier output
simple . OP_DOT
identifier emit_eof
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple return KW_RETURN
literal 0 int 00000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple ; OP_SEMICOLON
simple int KW_INT
identifier main
simple ( OP_LPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
simple try KW_TRY
simple { OP_LBRACE
identifier ostringstream
identifier oss
simple ; OP_SEMICOLON
identifier oss
simple << OP_LSHIFT
identifier cin
simple . OP_DOT
identifier rdbuf
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier string
identifier input
simple = OP_ASS
identifier oss
simple . OP_DOT
identifier str
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier input
simple += OP_PLUSASS
simple char KW_CHAR
simple ( OP_LPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier vector
simple < OP_LT
simple int KW_INT
simple > OP_GT
identifier iinput
simple = OP_ASS
identifier PPTranslator
simple :: OP_COLON2
identifier Translate
simple ( OP_LPAREN
identifier input
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier iinput
simple . OP_DOT
identifier push_back
simple ( OP_LPAREN
simple - OP_MINUS
literal 1 int 01000000
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier IPPTokenStream
identifier output
simple ; OP_SEMICOLON
identifier PPTokenizer
identifier tokenizer
simple ( OP_LPAREN
identifier output
simple ) OP_RPAREN
simple ; OP_SEMICOLON
simple for KW_FOR
simple ( OP_LPAREN
identifier uint
identifier i
simple = OP_ASS
literal 0 int 00000000
simple ; OP_SEMICOLON
identifier i
simple < OP_LT
identifier iinput
simple . OP_DOT
identifier size
simple ( OP_LPAREN
simple ) OP_RPAREN
simple ; OP_SEMICOLON
identifier i
simple ++ OP_INC
simple ) OP_RPAREN
simple { OP_LBRACE
simple int KW_INT
identifier code_unit
simple = OP_ASS
identifier iinput
simple [ OP_LSQUARE
identifier i
simple ] OP_RSQUARE
simple ; OP_SEMICOLON
simple if KW_IF
simple ( OP_LPAREN
identifier tokenizer
simple . OP_DOT
identifier process
simple ( OP_LPAREN
identifier code_unit
simple ) OP_RPAREN
simple ) OP_RPAREN
simple { OP_LBRACE
identifier i
simple = OP_ASS
identifier i
simple - OP_MINUS
literal 1 int 01000000
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
simple } OP_RBRACE
simple catch KW_CATCH
simple ( OP_LPAREN
identifier exception
simple & OP_AMP
identifier e
simple ) OP_RPAREN
simple { OP_LBRACE
identifier cerr
simple << OP_LSHIFT
literal "ERROR: " array of 8 char 4552524F523A2000
simple << OP_LSHIFT
identifier e
simple . OP_DOT
identifier what
simple ( OP_LPAREN
simple ) OP_RPAREN
simple << OP_LSHIFT
identifier endl
simple ; OP_SEMICOLON
simple return KW_RETURN
identifier EXIT_FAILURE
simple ; OP_SEMICOLON
simple } OP_RBRACE
simple } OP_RBRACE
eof
